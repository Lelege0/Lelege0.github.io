<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot 跨域问题处理</title>
      <link href="/2022/05/26/SpringBoot%20%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
      <url>/2022/05/26/SpringBoot%20%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>@<a href="SpringBoot处理跨域">TOC</a><br><em>==处理SpringBoot跨域的三种方式==</em></p><h5 id="1-使用注解"><a href="#1-使用注解" class="headerlink" title="1.使用注解"></a>1.使用注解</h5><p>使用@CrossOrigin 注解实现<br>如果想要对某一接口配置 CORS，可以在相应的方法上添加 @CrossOrigin 注解,如下,<strong>==只针对此接口起作用，别的接口还是不能跨域使用==</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"http://localhost:8086"</span><span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要对某一类中的接口配置 CORS，可以在相应的类上添加 @CrossOrigin 注解,如下，<strong>==只针对此类中的所有接口起作用，别的类下方的接口还是不能跨域使用==</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-编写配置类实现"><a href="#2-编写配置类实现" class="headerlink" title="2.编写配置类实现"></a>2.编写配置类实现</h5><p><strong>==对全局的接口都起作用==</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>org<span class="token punctuation">.</span>comunity<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>CorsRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrossConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-编写Filter实现"><a href="#3-编写Filter实现" class="headerlink" title="3.编写Filter实现"></a>3.编写Filter实现</h5><p>可以通过添加 Filter 的方式，配置 CORS 规则，并手动指定对哪些接口有效</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>CorsConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>UrlBasedCorsConfigurationSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CorsFilter<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConFiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">crosFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CorsConfiguration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定你自己的接口</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font size="6" color="red" face="楷体">上面三种方式亲测有效，欢迎大家批评斧正</font></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 跨域配置未生效</title>
      <link href="/2022/05/26/SpringBoot%20%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE%E6%9C%AA%E7%94%9F%E6%95%88/"/>
      <url>/2022/05/26/SpringBoot%20%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE%E6%9C%AA%E7%94%9F%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>Springboot处理跨域时出现如下问题<br>前端：<br><font color="red">Access to XMLHttpRequest at ‘<a href="http://localhost:8086/test/hello'" target="_blank" rel="noopener">http://localhost:8086/test/hello'</a> from origin ‘<a href="http://localhost:8080'" target="_blank" rel="noopener">http://localhost:8080'</a> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</font><br><img src="https://img-blog.csdnimg.cn/20201201210530293.png" alt="在这里插入图片描述"><br>后端：<br><strong>ava.lang.IllegalArgumentException: When allowCredentials is true, allowedOrigins cannot contain the special value “*”since that cannot be set on the “Access-Control-Allow-Origin” response header. To allow credentials to a set of origins, list them explicitly or consider using “allowedOriginPatterns” instead.<br>    at org.springframework.web.cors.CorsConfiguration.validateAllowCredentials(CorsConfiguration.java:457) ~[spring-web-5.3.1.jar:5.3.1]<br>    at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:520) ~[spring-webmvc-5.3.1.jar:5.3.1]<br>    at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1255) ~[spring-webmvc-5.3.1.jar:5.3.1]<br>    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1037) ~[spring-webmvc-5.3.1.jar:5.3.1]<br>    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:961) ~[spring-webmvc-5.3.1.jar:5.3.1]<br>    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.3.1.jar:5.3.1]<br>    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.3.1.jar:5.3.1]<br>    at javax.servlet.http.HttpServlet.service(HttpServlet.java:626) ~[tomcat-embed-core-9.0.39.jar:4.0.FR]<br>    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.3.1.jar:5.3.1]<br>    at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) ~[tomcat-embed-core-9.0.39.jar:4.0.FR]<br>    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.1.jar:5.3.1]<br>    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.1.jar:5.3.1]<br>    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.1.jar:5.3.1]<br>    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.1.jar:5.3.1]<br>    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.3.1.jar:5.3.1]<br>    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.1.jar:5.3.1]<br>    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]<br>    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]<br>    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.39.jar:9.0.39]<br>    at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]</strong></p><p><strong>问题的根源：</strong><br>            ==升级springboot2.4.0后， allowedOrigin不能用通配符*==</p><p><font size="6" face="楷体">解决方法:将springboot版本降至2.4.0一下的版本,如下所示</font></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_43775034/article/details/110453963" target="_blank" rel="noopener">附：SpringBoot跨域问题处理的三种方法</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Swagger</title>
      <link href="/2022/05/26/SpringBoot%E6%95%B4%E5%90%88Swagger/"/>
      <url>/2022/05/26/SpringBoot%E6%95%B4%E5%90%88Swagger/</url>
      
        <content type="html"><![CDATA[<p>@<a href="SpringBoot集成Swagger2">TOC</a></p><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>在前后端开发过程中，为了减少前后端程序员以及与其他团队之间的沟通成本，因此要定义一组公共的API接口文档来描述所有接口方法的信息。但是这种方式在某一方面也存在很大的弊端，如下：</p><ul><li>如果开发人员所描写的接口数量众多，一方面编写API接口文档工作量巨大，另一方面因为API接口不仅包含接口的基础信息，例如：请求参数‘请求类型及接口的返回值等等，还要包含HTTP请求类型，请求头、请求参数类型等；</li><li>后期维护不方便，一旦编写的接口发生变化，就要修改此API接口文档；</li><li>接口测试不方便，一般只能靠第三方客户端来测试<h4 id="一、Swagger-2简介"><a href="#一、Swagger-2简介" class="headerlink" title="一、Swagger 2简介"></a>一、Swagger 2简介</h4></li></ul><p><strong>Swagger 2是一个开源的软件框架，可以帮助开发人员设计、构建和使用Web服务，将代码与文档结合在一起，完美的解决了上述问题，使开发人员将大部分精力集中到业务中，而不是文档的撰写。</strong></p><h4 id="二、SpringBoot集成Swagger"><a href="#二、SpringBoot集成Swagger" class="headerlink" title="二、SpringBoot集成Swagger"></a>二、SpringBoot集成Swagger</h4><h5 id="2-1引入Swagger的依赖"><a href="#2-1引入Swagger的依赖" class="headerlink" title="2.1引入Swagger的依赖"></a>2.1引入Swagger的依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--swagger--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2编写Swagger-2配置类"><a href="#2-2编写Swagger-2配置类" class="headerlink" title="2.2编写Swagger 2配置类"></a>2.2编写Swagger 2配置类</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>org<span class="token punctuation">.</span>comunity<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.org.comunity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"xxxx管理系统"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token string">"https://www.xxx.com"</span><span class="token punctuation">,</span> <span class="token string">"xxxx@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"V1.0"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"API测试文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">license</span><span class="token punctuation">(</span><span class="token string">"Apache2.0"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">licenseUrl</span><span class="token punctuation">(</span><span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==解释:==<br><strong>RequestHandler=Selectors.basePackage(“com.org.comunity”)</strong><br>com.org.comunity为所要扫描的控制器即接口</p><h5 id="2-3编写控制器类测试"><a href="#2-3编写控制器类测试" class="headerlink" title="2.3编写控制器类测试"></a>2.3编写控制器类测试</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>org<span class="token punctuation">.</span>comunity<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>==Swagger 2注解解释==</strong><br>| 注解 | 作用      |参数|<br>|——–| ——–|————-|<br>| ==@Api== | 表示标识这个类是swagger的资源  | <strong>1.tags=”说明该类的作用，可以在UI界面上看到的注解”  <br>2.value=”该参数没什么意义，在UI界面上也看到，所以不需要配置”</strong>|<br>|==@ApiOperation==|用在请求的方法上，说明方法的用途、作用，表示一个http请求的操作 |<strong>value=”说明方法的用途、作用”<br> notes=”方法的备注说明”</strong>|<br>|@ApiImplicitParams|<strong>用在请求的方法上，表示一组参数说明，用于方法，包含多个 @ApiImplicitParam</strong>|name–参数ming <br>value–参数说明 <br>dataType–数据类型 <br>paramType–参数类型 <br>example–举例说明|<br>|@ApiImplicitParam|<strong>用在@ApiImplicitParams注解中，指定一个请求参数的各个方面，表示单独的请求参数</strong> |        name：参数的汉字说明、解释 <br> value：参数名 <br> required：参数是否必须传<br> paramType：参数放在哪个地方<br> header： 请求参数的获取：|<br>|==@ApiIgnore==|用于类，方法，方法参数表示这个方法或者类被忽略 ,可以不被swagger显示在页面上  ||<br>|@RequestHeader|指定请求类型|query：请求参数的获取：|<br>|@ApiParam|用于方法，参数，字段说明；表示对参数的添加元数据（说明或是否必填等|name–参数名<br> value–参数说明<br>required–是否必填|<br>|@PathVariable|是获取get方式，url后面参数，进行参数绑定，对应path  |body（不常用）form（不常用）    dataType：参数类型，默认String，其它值dataType=”Integer”       defaultValue：参数的默认值||<br>|@ApiResponses|用在请求的方法上，表示一组响应|code    http的状态码<br>message    描述<br>response    默认响应类 Void<br>reference    参考ApiOperation中配置<br>responseHeaders    参考 ResponseHeader 属性配置说明 <br>responseContainer    参考ApiOperation中配置|<br>|@ApiResponse|用在@ApiResponses中，一般用于表达一个错误的响应信息|code：数字，例如400 <br>message：信息，例如”请求参数没填好”  <br>response：抛出异常的类|<br>|==@ApiModel==|<strong>用于响应类上，表示一个返回响应数据的信息这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候)表示对类进行说明，用于参数用实体类接收</strong> |暂无|<br>|@ApiModelProperty|表示对model属性的说明或者数据操作更改 |value–字段说明 <br>name–重写属性名字 <br>dataType–重写属性类型 <br>required–是否必填 <br>example–举例说明 <br>hidden–隐藏|<br>|==@ResponseHeader==|用于方法上，设置响应头|name    响应头名称<br>description    头描述<br>response    默认响应类 Void<br>responseContainer    参考ApiOperation中配置|</p><p>==黄色为常用注解==</p><h5 id="2-4启动应用访问swagger-ui"><a href="#2-4启动应用访问swagger-ui" class="headerlink" title="2.4启动应用访问swagger-ui"></a>2.4启动应用访问swagger-ui</h5><p>浏览器输入 <a href="http://localhost:8086/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8086/swagger-ui.html</a><br><strong>8086为你的应用启动的端口号</strong><br><img src="https://img-blog.csdnimg.cn/20201130213918307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="web访问swagger"><br><strong>==用法：==</strong><br><img src="https://img-blog.csdnimg.cn/20201130214224641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201130214958185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="执行结果"><br>以上就是SpringBoot集成Swagger 2的全部了，希望大家能够get，有问题请及时批评斧正！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像原理</title>
      <link href="/2022/05/26/Docker%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2022/05/26/Docker%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>@<a href="Docker原理">TOC</a></p><h5 id="1-Docker镜像是什么？"><a href="#1-Docker镜像是什么？" class="headerlink" title="1.Docker镜像是什么？"></a>1.Docker镜像是什么？</h5><p>镜像是一种轻量级、可执行的独立软件包，<strong>用来打包软件运行环境和基于运行环境开发的软件</strong>，包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><h6 id="1-1联合文件系统-UnionFS"><a href="#1-1联合文件系统-UnionFS" class="headerlink" title="1.1联合文件系统(UnionFS)"></a>1.1联合文件系统(UnionFS)</h6><p>UnionFS（联合文件系统):Union文件系统(UnionFS)是一种分层、轻量级并且高性能的文件系统，<strong>它支持对文件系统的修改作为一次提交来一层层的叠加</strong>，Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>==特性==<br>一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联裔加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h6 id="1-2Dcoker镜像加载原理"><a href="#1-2Dcoker镜像加载原理" class="headerlink" title="1.2Dcoker镜像加载原理"></a>1.2Dcoker镜像加载原理</h6><p>docker的镜像实际上由一层一层的文件系统【文件系统UnionFS】组成的。<br>【bootis】==主要包含bootloader和kernel,bootioader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统==，<strong>在Docker镜像的最底层是bootfs</strong>。这一层与我们典型的LinuxUnix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>【rootfs】在bootfs之上。包含的就是典型Linux系统中的l/dev, /proc, /bin, letc等标准目录和文件。roots就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。<br><img src="https://img-blog.csdnimg.cn/20201129190222243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="rootfs-bootfs"><br>对于一个精简的OS，rootis可以很小，<strong>==只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就行了==</strong>。由此可见对于不同的linux发行版, bootfs基本是一致的,rootfs会有差剔,因此不同的发行版可以==共用bootfs== </p><h6 id="1-3分层镜像"><a href="#1-3分层镜像" class="headerlink" title="1.3分层镜像"></a>1.3分层镜像</h6><p>由一下这张图可以看出镜像的分层结构<br><img src="https://img-blog.csdnimg.cn/20201129191803800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="分层"><br>为什么Docker中的tomcat镜像有600M大？(见下图结构)<br><img src="https://img-blog.csdnimg.cn/20201129201702904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="tomcat镜像底层"></p><h6 id="1-4为什么Docker镜像要采用这种分层结构"><a href="#1-4为什么Docker镜像要采用这种分层结构" class="headerlink" title="1.4为什么Docker镜像要采用这种分层结构"></a>1.4为什么Docker镜像要采用这种分层结构</h6><p>==优点：==<br>资源的有效利用和资源的利用率高，因为docker中的很多镜像都是从相同的base镜像构建而来的，则宿主机只需要保存一份base镜像，同时内存中也只需要加载一份base镜像，就可以为所有容器服务了。而且每一层都是可以被共享的。<br><strong>越到上层，文件越大，因为要依赖的文件越多</strong></p><h5 id="2-Docker镜像的特点"><a href="#2-Docker镜像的特点" class="headerlink" title="2.Docker镜像的特点"></a>2.Docker镜像的特点</h5><p>Docker镜像是只读的，当容器启动时，一个新的【可写层】被加载到镜像的顶部。这一层通常被称作是【容器层】，“容器层”之下的都叫做【镜像层】。</p><h5 id="3-Docker镜像commit操作补充"><a href="#3-Docker镜像commit操作补充" class="headerlink" title="3.Docker镜像commit操作补充"></a>3.Docker镜像commit操作补充</h5><p><strong>镜像前台运行</strong><br>docker run -it -p 8888:8080 tomcat 【-p指定端口映射】<br><img src="https://img-blog.csdnimg.cn/2020112922113884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="虚拟机运行tomcat"><br><img src="https://img-blog.csdnimg.cn/20201129221106186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="虚拟机访问localhost：8888"><br>docker run -it -P tomcat【-P随机分配端口】<br>==注意==<br><em>区分前面的-p，这里为大写的-P</em><br><img src="https://img-blog.csdnimg.cn/20201129222536168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="随机分配端口"><br><img src="https://img-blog.csdnimg.cn/20201129222620130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201129222801134.png" alt="随机分配端口"><br><strong>镜像后台运行</strong><br><code>docker run -d -p 7777:8080 tomcat:8.5.32</code><br><img src="https://img-blog.csdnimg.cn/20201130193912111.png" alt="后台运行"></p><h6 id="3-1-docker-commit提交容器副本使之成为一个新的镜像"><a href="#3-1-docker-commit提交容器副本使之成为一个新的镜像" class="headerlink" title="3.1 docker commit提交容器副本使之成为一个新的镜像"></a>3.1 docker commit提交容器副本使之成为一个新的镜像</h6><p><strong>解释：</strong> 用户提交对原始容器的修改，并生成新的镜像<br><strong>用法：</strong> docker commit -m=”提交的描述信息” -a=”作者” <strong>容器ID</strong> 要创建的目标镜像名:[标签名(即版本信息)]<br><strong>==目的：通过提交新的副本可以生成我们所需要的应用，比如说以往比较大的应用但是里面有好多东西我们都用不到因此我们可以修改源文件对不需要以及不常用的内容删除将应用进行“瘦身”，之后重新发布此应用就变成了我们需要的“浓缩的”应用，这样可以减小存储的负载，加大对存储空间的利用率==</strong><br><img src="https://img-blog.csdnimg.cn/20201130195009396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="docker commit"><br>参数解释<br>| 参数 | 意义  |<br>|——–| ————-|<br>| -a | 提交的镜像作者|<br>|-c|使用Dockerfile指令来创建镜像|<br>|-m|提交时的说明文字|<br>|-p |提交期间暂停容器|</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础(容器命令)</title>
      <link href="/2022/05/26/Docker%E5%9F%BA%E7%A1%80(%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4)/"/>
      <url>/2022/05/26/Docker%E5%9F%BA%E7%A1%80(%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4)/</url>
      
        <content type="html"><![CDATA[<p>@<a href="容器命令">TOC</a></p><h4 id="六、容器命令"><a href="#六、容器命令" class="headerlink" title="六、容器命令"></a>六、容器命令</h4><h5 id="6-1新建并启动容器（启动交互式容器）"><a href="#6-1新建并启动容器（启动交互式容器）" class="headerlink" title="6.1新建并启动容器（启动交互式容器）"></a>6.1新建并启动容器（启动交互式容器）</h5><ul><li><code>docker run [OPTIONS] image [COMMAND][ARG...]        //新建并启动容器</code><br><img src="https://img-blog.csdnimg.cn/20201001210317731.png#pic_center" alt="新建并启动容器"><blockquote><p>ORTIONS说明（常用）：<strong>有的是一个减号有的是两个减号</strong></p><table><thead><tr><th align="center">参数</th><th>功能</th></tr></thead><tbody><tr><td align="center">- -name</td><td>容器的新名字：为容器指定一个新的名称</td></tr><tr><td align="center">-d</td><td>后台运行容器，并返回容器ID,也即启动守护式容器</td></tr><tr><td align="center"><strong>-i</strong></td><td><strong>以交互模式运行容器，通常与-t同时使用</strong></td></tr><tr><td align="center"><strong>-t</strong></td><td><strong>为容器重新分配一个伪输入终端，通常与-i同时使用</strong></td></tr><tr><td align="center">-P</td><td>随机端口映射</td></tr><tr><td align="center">-p</td><td>指定端口映射</td></tr><tr><td align="center">指定端口映射有四种形式</td><td></td></tr><tr><td align="center">- ip:hostPort:containerPort</td><td></td></tr><tr><td align="center">- ip::containerPort</td><td></td></tr><tr><td align="center">- <strong>hostPort:containerPort</strong></td><td></td></tr><tr><td align="center">- containerPort</td><td></td></tr></tbody></table></blockquote><h5 id="6-2列出当前所有正在运行的容器"><a href="#6-2列出当前所有正在运行的容器" class="headerlink" title="6.2列出当前所有正在运行的容器"></a>6.2列出当前所有正在运行的容器</h5></li><li><code>docker ps [OPTIONS]        //列出当前所有正在运行的所有容器</code><br><img src="https://img-blog.csdnimg.cn/20201001210936123.png#pic_center" alt="查看当前所有正在运行的容器"><blockquote><p>OPTIONS说明(常用):</p><table><thead><tr><th align="center">参数</th><th>功能</th></tr></thead><tbody><tr><td align="center">-a</td><td>列出当前所有<strong>正在运行的容器</strong> + <strong>历史上运行过的容器</strong><img src="https://img-blog.csdnimg.cn/20201002091932418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="当前所有正在运行的容器 + 历史上运行过的容器"></td></tr><tr><td align="center">-l</td><td>显示最近创建的容器 <img src="https://img-blog.csdnimg.cn/20201002091823716.png#pic_center" alt="显示最近创建的容器 "></td></tr><tr><td align="center">-n</td><td>显示最近n个创建的容器<img src="https://img-blog.csdnimg.cn/20201002092054500.png#pic_center" alt="显示最近创建的2个容器"></td></tr><tr><td align="center"><strong>-q</strong></td><td><strong>静默模式，只显示容器编号,只返回当前正在运行的容器ID</strong><img src="https://img-blog.csdnimg.cn/20201002100417413.png#pic_center" alt="只返回当前正在运行的容器ID"></td></tr><tr><td align="center">- -no-trunc</td><td>不截断输出</td></tr></tbody></table></blockquote><h5 id="6-3退出容器（两种方式）"><a href="#6-3退出容器（两种方式）" class="headerlink" title="6.3退出容器（两种方式）"></a>6.3退出容器（两种方式）</h5><h6 id="6-3-1-容器停止退出"><a href="#6-3-1-容器停止退出" class="headerlink" title="6.3.1 容器停止退出"></a>6.3.1 容器停止退出</h6></li><li><code>exit //容器停止退出</code><br><img src="https://img-blog.csdnimg.cn/2020100121215639.png#pic_center" alt="容器停止退出"><blockquote><p>docker ps 查看运行的容器<br><img src="https://img-blog.csdnimg.cn/20201002091429909.png#pic_center" alt="发现没有正在运行的，说明centos容器已经退出"></p></blockquote><h6 id="6-3-2-直接退出（不关闭）"><a href="#6-3-2-直接退出（不关闭）" class="headerlink" title="6.3.2 直接退出（不关闭）"></a>6.3.2 直接退出（不关闭）</h6></li><li><code>ctrl + p + q //容器退出但不关闭</code><br><img src="https://img-blog.csdnimg.cn/20201002092758415.png#pic_center" alt="退出但不关闭容器"><blockquote><p>证明退出容器但未关闭容器<img src="https://img-blog.csdnimg.cn/20201002093123886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><h5 id="6-4启动容器"><a href="#6-4启动容器" class="headerlink" title="6.4启动容器"></a>6.4启动容器</h5><h6 id="6-4-1启动容器"><a href="#6-4-1启动容器" class="headerlink" title="6.4.1启动容器"></a>6.4.1启动容器</h6><code>docker start 容器ID //启动上述退出的容器</code><br><img src="https://img-blog.csdnimg.cn/20201002093613803.png#pic_center" alt="启动直接退出的容器"><h6 id="6-4-2重启容器"><a href="#6-4-2重启容器" class="headerlink" title="6.4.2重启容器"></a>6.4.2重启容器</h6></li><li><code>docker restart + 容器ID //重新容器【运行时间开始重新计时】</code><br><img src="https://img-blog.csdnimg.cn/20201002094053456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="重启容器"><h5 id="6-5停止容器（两种形式）"><a href="#6-5停止容器（两种形式）" class="headerlink" title="6.5停止容器（两种形式）"></a>6.5停止容器（两种形式）</h5><h6 id="6-5-1-停止容器-温柔-【像摁冰箱的电源开关】"><a href="#6-5-1-停止容器-温柔-【像摁冰箱的电源开关】" class="headerlink" title="6.5.1 停止容器(温柔)【像摁冰箱的电源开关】"></a>6.5.1 停止容器(温柔)【像摁冰箱的电源开关】</h6></li><li><code>docker stop + 容器ID/容器名称  //停止当前正在运行的容器</code><br><img src="https://img-blog.csdnimg.cn/20201002094450162.png#pic_center" alt="停止当前正在运行的容器"><h6 id="6-5-2-强制关闭容器-【像直接把电源关闭冰箱】"><a href="#6-5-2-强制关闭容器-【像直接把电源关闭冰箱】" class="headerlink" title="6.5.2 强制关闭容器 【像直接把电源关闭冰箱】"></a>6.5.2 强制关闭容器 【像直接把电源关闭冰箱】</h6></li><li><code>docker kill + 容器ID/容器名称 // 强制关闭当前正在运行的容器</code><br><img src="https://img-blog.csdnimg.cn/20201002094845823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="强制关闭容器"><h5 id="6-6删除-已停止-容器"><a href="#6-6删除-已停止-容器" class="headerlink" title="6.6删除 ==已停止== 容器"></a>6.6删除 ==<em>已停止</em>== 容器</h5><h6 id="6-6-1删除单个已停止的容器"><a href="#6-6-1删除单个已停止的容器" class="headerlink" title="6.6.1删除单个已停止的容器"></a>6.6.1删除单个已停止的容器</h6></li><li><code>docker rm + 容器ID //删除单个已停止的容器</code><br><img src="https://img-blog.csdnimg.cn/20201002095755543.png#pic_center" alt="删除多个容器"><blockquote><p>如果当前容器<strong>正在运行</strong><br>使用 <code>docker rm -f + 容器ID //强制删除正在运行的容器</code></p></blockquote><h6 id="6-6-2-一次性删除多个容器"><a href="#6-6-2-一次性删除多个容器" class="headerlink" title="6.6.2 一次性删除多个容器"></a>6.6.2 一次性删除多个容器</h6></li><li><code>docker rm -f $(docker ps -aq) //批量删除</code></li><li><code>docker ps -aq | xargs docker rm //效果与上面的命令一致，不再赘述验证</code><br><img src="https://img-blog.csdnimg.cn/20201002100729713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="批量删除当前全部容器"><h4 id="七-容器命令-重要"><a href="#七-容器命令-重要" class="headerlink" title="七.容器命令(重要)"></a>七.容器命令(重要)</h4><h5 id="7-1启动守护式容器"><a href="#7-1启动守护式容器" class="headerlink" title="7.1启动守护式容器"></a>7.1启动守护式容器</h5></li><li><code>docker  run -d  + 容器名 //启动守护式容器</code><br><img src="https://img-blog.csdnimg.cn/20201002101902642.png#pic_center" alt="启动守护式容器"><blockquote><p>使用docker run -d centos<br>问题：然后docker ps -a 进行查看，发现容器已经退出<br><strong>重点：</strong> Docker容器后台运行，就必须有一个前台进程。容器运行的命令如果不是那些一直挂起的命令（比如运行top、tail），就是会自动退出的。<br>==这个是docker运行机制的问题，比如说你的web容器，我们以ngnix为例，正常情况下，我们配置启动服务只需要启动响应的service即可。例：service nginx start，但是这样做nginx为 <strong>后台进程模式运行，就会导致docker前台没有运行的应用，这样的容器后台启动后，就会立即自杀因为他觉得他无事可做了</strong> 所以最佳的解决方案是   <em>将你运行的程序以前台进程的形式运行</em>== </p></blockquote><h5 id="7-2查看容器日志"><a href="#7-2查看容器日志" class="headerlink" title="7.2查看容器日志"></a>7.2查看容器日志</h5></li><li><code>docker logs -f -t --tail + 容器ID //查看容器的运行日志</code></li></ul><table><thead><tr><th align="center">参数</th><th>功能</th></tr></thead><tbody><tr><td align="center">-t</td><td>加入时间戳</td></tr><tr><td align="center">-f</td><td>跟随最新的日志打印</td></tr><tr><td align="center">–tail</td><td>数字显示最后多少条记录</td></tr><tr><td align="center">#####  7.3查看容器内运行的进程</td><td></td></tr><tr><td align="center">-<code>docker top + 容器ID //查看当前容器中运行的进程</code></td><td></td></tr><tr><td align="center"><img src="https://img-blog.csdnimg.cn/20201002104918195.png#pic_center" alt="查看当前容器内运行的进程"></td><td></td></tr><tr><td align="center">#####  7.4 查看容器内部细节</td><td></td></tr><tr><td align="center">- <code>docker inspect + 容器ID //查看容器内部细节</code></td><td></td></tr><tr><td align="center"><img src="https://img-blog.csdnimg.cn/20201002105221712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="查看容器内部细节"></td><td></td></tr><tr><td align="center">#####  7.5 进入正在运行的容器并以命令交互</td><td></td></tr><tr><td align="center">- <code>docker attach + 容器ID //直接进入正在运行的容器内部</code></td><td></td></tr></tbody></table><blockquote><p>直接进入容器启动命令的终端，<strong>不会启动新的进程</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201002110205776.png#pic_center" alt="进入正在运行的容器中"><br>-<code>docker exec -t + 容器ID //进入正在运行的容器内部查看内容，没有真正意义上的进入内部</code></p><blockquote><p>是在容器中打开新的终端，<strong>并且可以启动新的进程</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201002110741792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="进入内部查看根目录信息"></p><blockquote><p>==区别：==</p><ol><li>attach命令进入容器后，exit退出容器会导致容器停止运行；<br>exec命令进入容器后，exit退出容器，容器不会停止</li><li>attach 直接进入容器启动命令的终端，<strong>不会启动新的进程</strong><br>exec 是在容器中打开新的终端，<strong>并且可以启动新的进程</strong></li></ol></blockquote><h5 id="7-6-从容器内拷贝文件到主机上"><a href="#7-6-从容器内拷贝文件到主机上" class="headerlink" title="7.6 从容器内拷贝文件到主机上"></a>7.6 从容器内拷贝文件到主机上</h5><ul><li><code>docker cp + 容器ID:容器内路径 目的主机路径  //将容器内的文件拷贝到宿主机上</code><br><img src="https://img-blog.csdnimg.cn/20201002160032504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="将容器内的文件拷贝到宿主机上"><blockquote><p>附：<br><img src="https://img-blog.csdnimg.cn/20201002162134237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="命令脑图"></p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础(常用命令)</title>
      <link href="/2022/05/26/Docker%E5%9F%BA%E7%A1%80(%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4)/"/>
      <url>/2022/05/26/Docker%E5%9F%BA%E7%A1%80(%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4)/</url>
      
        <content type="html"><![CDATA[<h4 id="五、常用命令"><a href="#五、常用命令" class="headerlink" title="五、常用命令"></a>五、常用命令</h4><h5 id="5-1帮助命令"><a href="#5-1帮助命令" class="headerlink" title="5.1帮助命令"></a>5.1帮助命令</h5><ul><li><p><code>docker version //验证：是否安装成功</code><br><img src="https://img-blog.csdnimg.cn/20200930093619262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="docker验证"></p></li><li><p><code>docker info //对docker安装信息的描述</code><br><img src="https://img-blog.csdnimg.cn/20200930094139309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="docker安装信息描述"></p></li><li><p><code>docker --help //docker命令提示（可以查询docker的所有操作命令）</code><br><img src="https://img-blog.csdnimg.cn/20200930094416414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="docker命令提示"></p><h5 id="5-2镜像命令"><a href="#5-2镜像命令" class="headerlink" title="5.2镜像命令"></a>5.2镜像命令</h5><h6 id="5-2-1-docker-images罗列本机镜像"><a href="#5-2-1-docker-images罗列本机镜像" class="headerlink" title="5.2.1 docker images罗列本机镜像"></a>5.2.1 docker images罗列本机镜像</h6></li><li><p><code>docker images //列出 *本地* 主机上的镜像</code><br><img src="https://img-blog.csdnimg.cn/20200930095440233.png#pic_center" alt="本地镜像"></p></li></ul><table><thead><tr><th align="center">属性</th><th>功能</th></tr></thead><tbody><tr><td align="center">REPOSITORY</td><td>表示镜像仓库源</td></tr><tr><td align="center">TAG</td><td>表示镜像的标签(个人理解为版本标签)</td></tr><tr><td align="center">IMAGE ID</td><td>表示镜像ID</td></tr><tr><td align="center">CREATED</td><td>表示镜像创建的时间</td></tr><tr><td align="center">SIZE</td><td>表示镜像的大小</td></tr></tbody></table><blockquote><p>注：1. 同一仓库可以有多个TAG，代表这个仓库的不同版本，我们使用REPOSITORY:TAG来定义不同的镜像；<br>2. 如果不指定镜像的标签，例如你使用 hello-world，docker将默认使用hello-world:latest最新版本镜像。</p></blockquote><ul><li><code>docker images -a   //列出*本地所有*的镜像(含中间映像层)镜像是分层的</code><br><img src="https://img-blog.csdnimg.cn/20200930100556149.png#pic_center" alt="本地所有镜像"></li><li><code>docker images -q //显示当前镜像的IMAGE ID</code><br><img src="https://img-blog.csdnimg.cn/202009301008451.png#pic_center" alt="镜像的id"></li><li><code>docker images -qa //显示当前镜像的所有分支镜像</code><br><img src="https://img-blog.csdnimg.cn/20200930101057536.png#pic_center" alt="镜像的所有分支"></li><li><code>docker images --digests   //显示镜像的摘要信息</code><br><img src="https://img-blog.csdnimg.cn/20200930101407794.png#pic_center" alt="显示镜像摘要信息"></li><li><code>docker images --no-trunc //显示完整镜像信息</code><br><img src="https://img-blog.csdnimg.cn/20200930101818771.png#pic_center" alt="完整的镜像信息"><h6 id="5-1-2-docker-search-镜像名"><a href="#5-1-2-docker-search-镜像名" class="headerlink" title="5.1.2 docker search + 镜像名"></a>5.1.2 docker search + 镜像名</h6></li><li><code>docker search tomcat(可任意更换) //查看这个镜像名的所有版本</code><br><img src="https://img-blog.csdnimg.cn/20200930102554592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="查看tomcat镜像的所有版本"></li><li><code>docker search -s 40 tomcat //-s表示这个镜像的点赞数，这条命令表示罗列出tomcat镜像点赞数超过40的tomcat镜像</code> <code>已废弃</code><br><code>docker search --filter=stars=40 tomcat  //代替上方已弃用的命令，查看点赞数超过40的tomcat的镜像</code><br><img src="https://img-blog.csdnimg.cn/20200930103217456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="查看点赞数超过40的tomcat镜像"></li><li><code>docker search --filter=stars=40 --no-trunc tomcat  //查看完整镜像描述且点赞数超过给定值的tomcat的镜像</code><br><img src="https://img-blog.csdnimg.cn/20200930103550737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="查看完整镜像描述的点赞数超过40的tomcat镜像tomcat"></li><li><code>docker search --automated tomcat //查询自动构建的tomcat版本</code> <code>已弃用</code><br><code>docker search --filter=is-automated=true tomcat //代替上方已弃用命令</code><br><img src="https://img-blog.csdnimg.cn/20200930104027176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="查询自动构建的tomcat版本"><h6 id="5-1-3-docker-pull-镜像名-拉取-下载-镜像"><a href="#5-1-3-docker-pull-镜像名-拉取-下载-镜像" class="headerlink" title="5.1.3 docker pull + 镜像名(拉取[下载]镜像)"></a>5.1.3 docker pull + 镜像名(拉取[下载]镜像)</h6></li><li><code>docker pull tomcat  //拉取所需镜像,后不加版本号默认为最新版本</code><br><img src="https://img-blog.csdnimg.cn/20200930105017682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="拉取、下载镜像"><h6 id="5-1-4-docker-rmi-镜像名"><a href="#5-1-4-docker-rmi-镜像名" class="headerlink" title="5.1.4 docker rmi + 镜像名"></a>5.1.4 docker rmi + 镜像名</h6></li></ul><p><em>删除单个镜像</em><br>docker rmi -f 镜像名</p><ul><li><code>docker rmi hello-world //删除hello-world镜像【如镜像正在使用则提示删除失败此时需要加 '-f' 进行强制删除】</code><br><img src="https://img-blog.csdnimg.cn/2020093010543460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="删除hello-world镜像"><br><img src="https://img-blog.csdnimg.cn/20200930105616959.png#pic_center" alt="删除成功"></li></ul><p><em>同时删除多个镜像</em><br>docker rmi + 镜像名1:TAG 镜像名2:TAG</p><ul><li><code>docker rmi -f hello-world nginx //同时删除hello-world和nginx镜像</code><br><img src="https://img-blog.csdnimg.cn/20200930110143207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="同时删除两个镜像"><br><img src="https://img-blog.csdnimg.cn/20200930110335927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="删除成功"></li></ul><p><em>删除所有镜像</em><br>docker rmi -f $(docker images -qa)</p><blockquote><p>注：删除命令中带’-f’表示强制删除</p></blockquote><p><strong>笔者不想再重复下载那些镜像，所以就留给大家去测试</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础(底层原理)</title>
      <link href="/2022/05/26/Docker%E5%9F%BA%E7%A1%80(%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86)/"/>
      <url>/2022/05/26/Docker%E5%9F%BA%E7%A1%80(%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86)/</url>
      
        <content type="html"><![CDATA[<h4 id="四、Docker运行底层原理"><a href="#四、Docker运行底层原理" class="headerlink" title="四、Docker运行底层原理"></a>四、Docker运行底层原理</h4><h5 id="4-1Docker是怎么工作的"><a href="#4-1Docker是怎么工作的" class="headerlink" title="4.1Docker是怎么工作的"></a>4.1Docker是怎么工作的</h5><p>Docker是一个<strong>Client-Server结构的系统</strong>，Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器，==容器是一个运行环境，就是docker图标上的集装箱==</p><h5 id="4-2Docker为什么比VM快"><a href="#4-2Docker为什么比VM快" class="headerlink" title="4.2Docker为什么比VM快"></a>4.2Docker为什么比VM快</h5><ul><li>Docker有着比虚拟机更少的抽象层。由于docker不需要<a href="https://baike.baidu.com/item/hypervisor/3353492?fr=aladdin" target="_blank" rel="noopener">Hypervisor</a> <code>虚拟机监视器，是用来建立与执行虚拟机器的软件、固件或硬件。提供虚拟的作业平台来执行客体操作系统（guest operating systems），负责管理其他客体操作系统的执行阶段；这些客体操作系统，共同分享虚拟化后的硬件资源。</code>实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</li><li>Docker利用的是宿主机的内核，而不需Cuest OS<code>客体操作系统</code>。因此，当新建一个容器时，docker不需要和虚拟机一样的重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核反个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，返个新建过程是==分钟级别==的。而docker由于直接利用宿主机的操作系统，则省略了返个过程，因此新建一个docker容器只需要==几秒钟==。</li><li><img src="https://img-blog.csdnimg.cn/20200930092421497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="虚拟机、docker对比"></li><li><table><thead><tr><th align="center"></th><th>Docker容器</th><th>虚拟机(VM)</th></tr></thead><tbody><tr><td align="center">操作系统</td><td>与宿主机共享OS</td><td>宿主机OS上运行虚拟机OS</td></tr><tr><td align="center">存储大小</td><td>镜像小，便于存储和传输</td><td>镜像庞大(vmdk\vdi)等</td></tr><tr><td align="center">运行性能</td><td>几乎无额外性能损失</td><td>操作系统额外的CPU、内存消耗</td></tr><tr><td align="center">移植性</td><td>轻便、灵活，适应于Linux</td><td></td></tr><tr><td align="center">硬件亲和性</td><td>面向软件开发者</td><td>面向硬件运维者</td></tr><tr><td align="center">部署速度</td><td>快速，秒级</td><td>较慢，10s以上</td></tr></tbody></table></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础(简介)</title>
      <link href="/2022/05/26/Docker%E5%9F%BA%E7%A1%80(%E7%AE%80%E4%BB%8B)/"/>
      <url>/2022/05/26/Docker%E5%9F%BA%E7%A1%80(%E7%AE%80%E4%BB%8B)/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Docker简介"><a href="#一、Docker简介" class="headerlink" title="一、Docker简介"></a>一、Docker简介</h4><p><em>Docker图标详解</em><img src="https://img-blog.csdnimg.cn/20200930095201786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="docker图标"></p><h5 id="1-Docker是什么？"><a href="#1-Docker是什么？" class="headerlink" title="1.Docker是什么？"></a>1.Docker是什么？</h5><ul><li>Docker是基于 <strong><a href="https://golang.google.cn/" target="_blank" rel="noopener">Go语言</a></strong>实现的云开源项目；<ul><li>主要目标是 “Build, Ship and Run Any App,AnyWhere”，也就是通过对应组件的封装、分发、部署、运行等生命周期的管理，使用户的App(可以是一个WEB应用或数据库应用等等)及其运行环境能够做到 <strong>“一次封装，到处运行”</strong></li><li>Linux容器技术的出现就解决了这一问题，而Docker就是在他的基础上发展过来的。将应用运行在Docker容器上面，而Docker容器在任何操作系统上都是一样的，这就实现了跨平台、跨服务器。<strong>只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</strong></li><li>==解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。==<h5 id="2-Docker能做什么？"><a href="#2-Docker能做什么？" class="headerlink" title="2.Docker能做什么？"></a>2.Docker能做什么？</h5><h6 id="2-1之前的虚拟机技术（连带模拟硬件）"><a href="#2-1之前的虚拟机技术（连带模拟硬件）" class="headerlink" title="2.1之前的虚拟机技术（连带模拟硬件）"></a>2.1之前的虚拟机技术（连带模拟硬件）</h6>虚拟机：带环境安装的一种解决方案。<br>缺点：</li></ul></li></ul><ul><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li></ul><p><em>由于前面虚拟机存在的这些缺点，Linux发展出了两一种虚拟化技术：</em> <strong>Linux容器（Linux Container，缩写为LXC）</strong></p><h6 id="2-2Linux容器"><a href="#2-2Linux容器" class="headerlink" title="2.2Linux容器"></a>2.2Linux容器</h6><p>Linux容器不是模拟一个完整的操作系统，而是对<strong>进程</strong>进行隔离。有了容器就可以将软件运行所需要的所有资源打包到一个隔离的容器中。<br><strong>==容器与虚拟机的不同之处：==</strong> 不需要捆绑一整套操作系统，只需要软件工作所需要的库资源和设置。系统因此变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><p><strong>==Docker和传统虚拟化方式地不同之处：==</strong></p><ul><li>传统虚拟机技术和虚拟出一套硬件后，在其上运行一个完整地操作系统，在该操作系统上再运行所需应用进程；</li><li>而容器内的应用进程直接运行于宿主的内核，<strong>容器内没有自己的内核，而且也没有进行硬件虚拟</strong>。因此容器比传统虚拟机更为轻便。</li><li>每个容器之间相互隔离，每个容器都有自己的文件系统，容器之间进程不会相互影响，能区分计算资源。</li></ul><p><strong>Docker开发的好处(面试)：</strong></p><ul><li>更快速的应用交付和部署；</li><li>更便捷的升级和扩缩容；</li><li>更简单的系统运维；</li><li>更高效的计算资源利用。</li></ul><p>==下载地址：==<br>1.官网：</p><ul><li>docker官网：<a href="http://www.docker.com" target="_blank" rel="noopener">docker官网</a></li><li>docker中文官网：<a href="https://www.docker-cn.com" target="_blank" rel="noopener">docker中文官网</a></li></ul><p>2.仓库：</p><ul><li>Docker hub官网：<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker hub官网</a><h4 id="二、Docker三要素-（镜像、容器、仓库）"><a href="#二、Docker三要素-（镜像、容器、仓库）" class="headerlink" title="二、Docker三要素 （镜像、容器、仓库）"></a>二、Docker三要素 （镜像、容器、仓库）</h4>Docker本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包形成一个可交付的运行环境，这个打包好的运行环境就似乎一个Image镜像文件。只有通过这个镜像文件才能生成Docker容器。Image文件可以看作是容器的模板。Docker根据image文件生成容器实例。<strong>同一个镜像文件可以同时运行多个容器实例。</strong><br>Docker的结构图：<br><img src="https://img-blog.csdnimg.cn/20200928160152628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="Docker的架构图"><h5 id="2-1镜像-Image"><a href="#2-1镜像-Image" class="headerlink" title="2.1镜像(Image)"></a>2.1镜像(Image)</h5>Docker镜（Image）就是一个只读的模板。镜像可以用来创建Docker容器，<strong>一个镜像可以创建很多的容器。</strong><br>容器与镜像的关系类似面向对象中的对象和类：<table><thead><tr><th align="center">Docker</th><th align="center">面向对象</th></tr></thead><tbody><tr><td align="center">容器</td><td align="center">对象</td></tr><tr><td align="center">镜像</td><td align="center">类</td></tr><tr><td align="center">#####  2.2容器(Container)</td><td align="center"></td></tr></tbody></table></li></ul><ol><li>Docker利用容器(Container)独立运行的一个或一组应用。容器使用镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。<strong>可以把容器看做是一个简易版的Linux环境和运行在其中的应用程序。</strong> 容器的定义和镜像几乎一摸一样，也是一堆层的统一视角，==<strong>唯一区别就是最上面那一层是可读可写的</strong>==</li><li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户创建一个对应的运行实例，也就是我们的容器。<h5 id="2-3仓库-Repository"><a href="#2-3仓库-Repository" class="headerlink" title="2.3仓库(Repository)"></a>2.3仓库(Repository)</h5></li></ol><p><em>仓库是集中存放镜像文件的场所。</em><br>仓库和仓库注册服务器是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签。<br>仓库分类：</p><ul><li>公开仓库(最大的仓库是：<a href="https://hub.docker.com/" target="_blank" rel="noopener">Dcoker Hub</a>)存放了数量庞大的镜像提供下载。国内的公开仓库：阿里云、网易云等。</li><li>私有仓库<h4 id="三、Docker安装-参考官网"><a href="#三、Docker安装-参考官网" class="headerlink" title="三、Docker安装(参考官网)"></a>三、Docker安装(参考官网)</h4><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">CentOS7安装Docker</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Session详解</title>
      <link href="/2022/05/26/Session%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/05/26/Session%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Session"><a href="#一、Session" class="headerlink" title="一、Session"></a>一、Session</h4><h5 id="1-什么是Session"><a href="#1-什么是Session" class="headerlink" title="1.什么是Session"></a>1.什么是Session</h5><p>1.Session是一个接口（HttpSession）;<br>2.Session就是会话，用来维护客户端和服务器之间关联的一种技术；<br>3.每个客户端都有自己的Session会话；<br>4.Session会话中，我们经常用来保存用户登陆之后的信息。</p><h5 id="2-如何创建Session和获取-id号，是否为新"><a href="#2-如何创建Session和获取-id号，是否为新" class="headerlink" title="2.如何创建Session和获取(id号，是否为新)"></a>2.如何创建Session和获取(id号，是否为新)</h5><pre class="line-numbers language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一次调用：创建Session会话；</li><li>之后调用：获取前面创建好的Session会话对象。</li></ul><p><strong>问题：</strong> 怎么判断是创建Session对象还是调用Session对象？<br>用 ==isNew()== 函数来判断到底是不是新创建出来的</p><ul><li>true：表示刚创建，是新的</li><li>flase：表示获取之前创建的Session会话对象</li></ul><p><strong>问题：</strong> 每个客户端都有一个Session会话，怎么区分？<br>每个会话都有一个唯一一个与之对应的ID，进行区分。<br>使用==getId()== 获取Session的会话id值。</p><p>创建SessionServlet类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createSession</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建和获取session会话对象</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断当前的额session对话，是否是新创建出来的</span>        <span class="token keyword">boolean</span> isNew <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取Session会话的唯一标识</span>        String Id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"得到的Session，他的id是:"</span><span class="token operator">+</span> Id <span class="token operator">+</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这个Session，是否是新创建的:"</span><span class="token operator">+</span> isNew <span class="token operator">+</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-Session域数据的存取"><a href="#3-Session域数据的存取" class="headerlink" title="3.Session域数据的存取"></a>3.Session域数据的存取</h5><p><strong>==session中存数据都是以键值对的形式进行，取数据时以存储的键往外取数据==</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 往session中保存数据     * @param request     * @param response     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"往session对象中添加数据成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从session中获取数据     * @param request     * @param response     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Object attribute <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"从Session获取出key1的数据是:"</span> <span class="token operator">+</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-Session生命周期的控制"><a href="#4-Session生命周期的控制" class="headerlink" title="4.Session生命周期的控制"></a>4.Session生命周期的控制</h5><p><strong>==Session超时原理==</strong><br><img src="https://img-blog.csdnimg.cn/20200827214334991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="Session超时原理"></p><h6 id="4-1-设置Session的超时时间，超过指定的时长，session就会被销毁"><a href="#4-1-设置Session的超时时间，超过指定的时长，session就会被销毁" class="headerlink" title="4.1==设置Session的超时时间，超过指定的时长，session就会被销毁=="></a>4.1==设置Session的超时时间，超过指定的时长，session就会被销毁==</h6><p>指定在 servlet 容器使此会话失效之前客户端请求之间的时间间隔，<strong>以秒为单位</strong>。负数时间指示会话永远不会超时。 interval 指定秒数的整数 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token keyword">int</span> interval<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置Session的超时时间，超过指定的时长，session就会被销毁</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>interval的值为正数的时候，设定Session的超时时长</li><li>interval的值为负数的时候，设定Session永不超时（极少使用）<h6 id="4-2-获取Session的超时时长"><a href="#4-2-获取Session的超时时长" class="headerlink" title="4.2==获取Session的超时时长=="></a>4.2==获取Session的超时时长==</h6>返回 servlet 容器在客户端访问之间将使此会话保持打开状态的最大时间间隔，以秒为单位。在此间隔之后，servlet 容器将使会话无效。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="4-3-让Session会话对象马上超时无效"><a href="#4-3-让Session会话对象马上超时无效" class="headerlink" title="4.3 ==让Session会话对象马上超时无效=="></a>4.3 ==让Session会话对象马上超时无效==</h6><p>使此会话无效，然后取消对任何绑定到它的对象的绑定。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deletenow</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取默认的session对象</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让Session对话马上超时</span>        session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"session已经设置为无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-3Session默认的超时时长："><a href="#4-3Session默认的超时时长：" class="headerlink" title="4.3Session默认的超时时长："></a>4.3Session默认的超时时长：</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取默认的session超时时长     * @param request     * @param response     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">defaultLife</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取默认的session超时时长</span>        <span class="token keyword">int</span> maxInactiveInterval <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"session默认的超时时长为:"</span> <span class="token operator">+</span> maxInactiveInterval <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==浏览器打印数据：（默认超时时长为30分钟）==<br><img src="https://img-blog.csdnimg.cn/20200827204747844.png#pic_center" alt="默认超时时长"></p><h6 id="4-4在tomcat服务器的配置信息web-xml中也可以看到默认session的超时时长为30分钟，表示配置了当前tomcat服务器下所有的Session超时配置默认时长。"><a href="#4-4在tomcat服务器的配置信息web-xml中也可以看到默认session的超时时长为30分钟，表示配置了当前tomcat服务器下所有的Session超时配置默认时长。" class="headerlink" title="4.4在tomcat服务器的配置信息web.xml中也可以看到默认session的超时时长为30分钟，表示配置了当前tomcat服务器下所有的Session超时配置默认时长。"></a>4.4在tomcat服务器的配置信息web.xml中也可以看到默认session的超时时长为<strong>30分钟</strong>，表示配置了当前tomcat服务器下所有的Session超时配置默认时长。</h6><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>如果你希望你的web工程，默认的session超时时长为其他时长，你可以在你自己的web.xml配置文件中做以上相同的配置，就可以修改你的web工程所有session的默认超时时长。</em></p><p>==注意以上方式适合修改当前tomcat下部署的所有web工程==</p><p><em>如果你希望修改当前tomcat下个别web工程则需调用下面的API接口去实现个别web工程中的session默认超时时长</em></p><pre class="line-numbers language-java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token keyword">int</span> interval<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//单独设置超时时长</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 改变session默认超时时长     * @param request     * @param response     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">life3</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取默认的session对象</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置当前session3秒超时</span>        session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"当前session已经设置为3秒后超时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-浏览器和Session之间关联的技术内幕"><a href="#5-浏览器和Session之间关联的技术内幕" class="headerlink" title="5.浏览器和Session之间关联的技术内幕"></a>5.浏览器和Session之间关联的技术内幕</h5><p>==Session技术，底层其实是基于Cookie技术实现的。==<br><img src="https://img-blog.csdnimg.cn/20200829110154666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70#pic_center" alt="浏览器和Session之间关联的技术内幕"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux运行jar包_node应用，查看jar_node进程，停止jar包_ndoe</title>
      <link href="/2022/05/26/Linux%E8%BF%90%E8%A1%8Cjar%E5%8C%85_node%E5%BA%94%E7%94%A8%EF%BC%8C%E6%9F%A5%E7%9C%8Bjar_node%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%81%9C%E6%AD%A2jar%E5%8C%85_ndoe/"/>
      <url>/2022/05/26/Linux%E8%BF%90%E8%A1%8Cjar%E5%8C%85_node%E5%BA%94%E7%94%A8%EF%BC%8C%E6%9F%A5%E7%9C%8Bjar_node%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%81%9C%E6%AD%A2jar%E5%8C%85_ndoe/</url>
      
        <content type="html"><![CDATA[<p><strong>==如果要运行java项目，首先要把项目打包成jar或者war，如果选择后者的打包方式我们需要将war放到服务器tomcat上才能运行，选择前者则将jar放到服务器的任何位置上，直接使用java命令linux上运行==</strong><br><em>node应用直接使用将工程放到服务器，使用下面命令即可</em></p><h5 id="1-基本形式"><a href="#1-基本形式" class="headerlink" title="1.基本形式"></a>1.基本形式</h5><pre class="line-numbers language-linux"><code class="language-linux">java -jar xxx.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时我们使用ctrl+c结束运行或者关闭窗口时，程序服务也会相应的终端执行，不再提供服务。</p><h5 id="2-克服上一种的ctrl-c"><a href="#2-克服上一种的ctrl-c" class="headerlink" title="2.克服上一种的ctrl+c"></a>2.克服上一种的ctrl+c</h5><pre class="line-numbers language-linux"><code class="language-linux"> java -jar xxx.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时我们使用ctrl+c结束运行，程序不会被中断，但是关闭窗口仍然会中断程序的运行，结束服务</p><h5 id="3-克服上一种关闭窗口"><a href="#3-克服上一种关闭窗口" class="headerlink" title="3.克服上一种关闭窗口"></a>3.克服上一种关闭窗口</h5><pre class="line-numbers language-linux"><code class="language-linux">nohup java -jar xxx.jar &                //java程序nohup node xxx.js &                      //node应用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用这种方式运行java项目，之后使用ctrl+c或者关闭窗口都不会中断程序的运行</p><h5 id="4-上一种方法的升级"><a href="#4-上一种方法的升级" class="headerlink" title="4.上一种方法的升级"></a>4.上一种方法的升级</h5><pre class="line-numbers language-linux"><code class="language-linux">nohup java -jar xxx.jar >temp.log &    //java程序nohup node xxx.js &                            //node应用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>temp.out的意思是将日志输出重定向到temp.log文件，使用ctrl+c中断或者关闭窗口都不会中断程序的执行。</p></blockquote><h5 id="5-查看运行的所有程序"><a href="#5-查看运行的所有程序" class="headerlink" title="5.查看运行的所有程序"></a>5.查看运行的所有程序</h5><pre class="line-numbers language-linux"><code class="language-linux">ps -ef|grep java                 //查看运行的java程序ps -rf|grep node                //查看运行的node程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-linux"><code class="language-linux">ps -aux | grep java          //查看运行的java程序ps -aux | grep node         //查看运行的node程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="6-查询指定包名的java程序"><a href="#6-查询指定包名的java程序" class="headerlink" title="6.查询指定包名的java程序"></a>6.查询指定包名的java程序</h5><pre class="line-numbers language-linux"><code class="language-linux">ps aux|grep 包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7-杀掉进程-停止运行的jar或者node应用"><a href="#7-杀掉进程-停止运行的jar或者node应用" class="headerlink" title="7.杀掉进程/停止运行的jar或者node应用"></a>7.杀掉进程/停止运行的jar或者node应用</h5><pre class="line-numbers language-linux"><code class="language-linux">kill -9 程序运行的pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> jar </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux查看端口占用，强制释放占用端口</title>
      <link href="/2022/05/26/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%EF%BC%8C%E5%BC%BA%E5%88%B6%E9%87%8A%E6%94%BE%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3/"/>
      <url>/2022/05/26/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%EF%BC%8C%E5%BC%BA%E5%88%B6%E9%87%8A%E6%94%BE%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h5 id="1-查看所有端口占用情况"><a href="#1-查看所有端口占用情况" class="headerlink" title="1.查看所有端口占用情况"></a>1.查看所有端口占用情况</h5><p><strong><em>netstat命令各个参数说明如下</em></strong><br>| Column 1 | Column 2      |<br>|:——–:| :————-:|<br>| -t |指明显示TCP端口|<br>|-u | 指明显示UDP端口|<br>| -l |仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)|<br>| -p |显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。|<br>| -n |不进行DNS轮询，显示IP(可以加速操作)|</p><h6 id="1-1查看TCP类型的端口占用情况"><a href="#1-1查看TCP类型的端口占用情况" class="headerlink" title="1.1查看TCP类型的端口占用情况"></a>1.1查看TCP类型的端口占用情况</h6><ul><li>netstat -tln</li><li>netstat -ntpl<h6 id="1-2查看UDP类型的端口占用情况"><a href="#1-2查看UDP类型的端口占用情况" class="headerlink" title="1.2查看UDP类型的端口占用情况"></a>1.2查看UDP类型的端口占用情况</h6></li><li>netstat -nupl<h6 id="1-3查看TCP、UDP类型的端口占用情况"><a href="#1-3查看TCP、UDP类型的端口占用情况" class="headerlink" title="1.3查看TCP、UDP类型的端口占用情况"></a>1.3查看TCP、UDP类型的端口占用情况</h6></li><li>netstat -tunlp<h5 id="2查看给定端口的使用情况"><a href="#2查看给定端口的使用情况" class="headerlink" title="2查看给定端口的使用情况"></a>2查看给定端口的使用情况</h5></li><li>lsof -i:端口号</li></ul><p><em><strong>lsof -i 用以显示符合条件的进程情况，lsof(list open files)是一个列出当前系统打开文件的工具。</strong></em><br>以root用户来执行lsof -i命令，如下图,lsof输出的每列的意义是：<br>| 列名 |    意义      |<br>|:——–:| :————-:|<br>|COMMAND|进程的名称或者进程开启的方式|<br>|PID|进程id|<br>|USER|进程所有者|<br>|FD|文件描述符|<br>|TYPE|协议类型|<br>|DEVICE|端口号|<br>|SIZE/OFF|偏移|<br>|NODE|协议名|<br>|NAME|节点名|</p><ul><li>netstat -tunlp|grep 端口号</li><li>netstat -ntulp |grep 端口号<h5 id="3-杀掉占用端口的进程，依据pid杀掉"><a href="#3-杀掉占用端口的进程，依据pid杀掉" class="headerlink" title="3.杀掉占用端口的进程，依据pid杀掉"></a>3.杀掉占用端口的进程，依据pid杀掉</h5></li><li>kill -9 进程pid</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> jar </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie——免用户名登陆</title>
      <link href="/2020/08/02/Cookie%E2%80%94%E2%80%94%E5%85%8D%E7%94%A8%E6%88%B7%E5%90%8D%E7%99%BB%E9%99%86/"/>
      <url>/2020/08/02/Cookie%E2%80%94%E2%80%94%E5%85%8D%E7%94%A8%E6%88%B7%E5%90%8D%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<h5 id="一、实现细节和原理"><a href="#一、实现细节和原理" class="headerlink" title="一、实现细节和原理"></a>一、实现细节和原理</h5><p><strong>原理：</strong> 即将用户的用户名作为Cookie对象的<strong>键</strong>，用户名的值作为Cookie对象的<strong>值</strong>，共同作为cookie对象的参数被创建并保存在浏览器中。<br><img src="https://img-blog.csdnimg.cn/20200802154421552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="Cookie免用户名登陆的原理图示"></p><h5 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h5><p><strong>创建login.jsp</strong></p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>${cookie}<br>${cookie.username.value}<form action="http://localhost:8080/loginServlet" method="get">    用户名: <input type="text" name="username" value="${cookie.username.value}"><br>    密  码: <input type="password" name="password" id=""><br>    <input type="submit" value="登陆"></form></body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建LoginServlet</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"lelege"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username <span class="token punctuation">)</span><span class="token punctuation">;</span>            cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前cookie一周内有效</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>当输入的密码错误时，控制台输出登陆失败，浏览器没有创建相应的cookie</em><br><img src="https://img-blog.csdnimg.cn/20200802161435932.png" alt="服务器端输出登录失败"><br><strong>浏览器未创建cookie对象</strong><br><img src="https://img-blog.csdnimg.cn/20200802161521909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="浏览器未创建cookie对象"><br><strong>==当输入正确的用户名密码时，控制台输出登录成功，浏览器创建cookie对象并保存。==</strong><br><img src="https://img-blog.csdnimg.cn/20200802161652617.png" alt="控制台输出登录成功"><br><strong>浏览器成功创建username的cookie对象并保存。</strong><br><img src="https://img-blog.csdnimg.cn/2020080216172986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="浏览器创建username的cookie对象"><br><strong>==此时关闭浏览器重新打开，成功实现免用户名登录，用户名自动填充==</strong><br><img src="https://img-blog.csdnimg.cn/20200802161937178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="成功实现免用户名登录"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Servlet </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session</title>
      <link href="/2020/08/02/Cookie%E5%92%8CSession/"/>
      <url>/2020/08/02/Cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Cookie"><a href="#一、Cookie" class="headerlink" title="一、Cookie"></a>一、Cookie</h4><h5 id="1-什么是Cookie？"><a href="#1-什么是Cookie？" class="headerlink" title="1.什么是Cookie？"></a>1.什么是Cookie？</h5><p>1.为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。<br>2.Cookie是服务器通知客户端保存键值对的一种技术。<br>3.客户端有了Cookie后，每次请求将Cookie发送给服务器。<br>4.<strong>每个Cookie的大小不超过4kb。</strong></p><h5 id="2-如何创建Cookie"><a href="#2-如何创建Cookie" class="headerlink" title="2.如何创建Cookie"></a>2.如何创建Cookie</h5><h6 id="2-1Cookie创建的过程图示"><a href="#2-1Cookie创建的过程图示" class="headerlink" title="2.1Cookie创建的过程图示"></a>2.1Cookie创建的过程图示</h6><p><img src="https://img-blog.csdnimg.cn/20200802091133609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="cookie创建的过程"></p><h6 id="2-2Cookie创建"><a href="#2-2Cookie创建" class="headerlink" title="2.2Cookie创建"></a>2.2Cookie创建</h6><p>创建CookieServlet.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">creatCookie</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建cookie对象</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.通知客户端保存cookie</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Cookie创建成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端(浏览器)保存cookie信息<br><img src="https://img-blog.csdnimg.cn/20200802085100759.png" alt="浏览器记录创建的cookie信息"></p><h5 id="3-服务器如何获取Cookie"><a href="#3-服务器如何获取Cookie" class="headerlink" title="3.服务器如何获取Cookie"></a>3.服务器如何获取Cookie</h5><h6 id="3-1Cookie获取过程图示"><a href="#3-1Cookie获取过程图示" class="headerlink" title="3.1Cookie获取过程图示"></a>3.1Cookie获取过程图示</h6><p><img src="https://img-blog.csdnimg.cn/20200802093140553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="Cookie获取过程图示"></p><h6 id="3-2获取cookie"><a href="#3-2获取cookie" class="headerlink" title="3.2获取cookie"></a>3.2获取cookie</h6><p><strong>获取所有的cookie对象</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>activation<span class="token punctuation">.</span>ActivationGroup_Stub<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie<span class="token operator">:</span>cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//getname方法返回cookie的名称即key</span>            <span class="token comment" spellcheck="true">//getvalue方法返回cookie的value的值</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Cookie["</span><span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取指定名称的cookie（1）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CookieUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>activation<span class="token punctuation">.</span>ActivationGroup_Stub<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie iwantCookie <span class="token operator">=</span> null        <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie<span class="token operator">:</span>cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//getname方法返回cookie的名称即key</span>            <span class="token comment" spellcheck="true">//getvalue方法返回cookie的value的值</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Cookie["</span><span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"指定的cookie名称"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                iwantCookie <span class="token operator">=</span> cookie<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果不等于null，说明赋值成功，找到了需要的cookie</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iwantCookie <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"找到了需要的cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取指定名称的cookie（2）</strong><br><em>创建获取指定名称的cookie工具类CookieUtils，将获取指定cookie的方法封装起来</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查找指定名称的cookie对象     * @param name     * @param cookies     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Cookie <span class="token function">findCookie</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> null <span class="token operator">||</span> cookies <span class="token operator">==</span> null <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>  null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie<span class="token operator">:</span> cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> cookie<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CookieUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>activation<span class="token punctuation">.</span>ActivationGroup_Stub<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie iwantCookie <span class="token operator">=</span> CookieUtils<span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iwantCookie <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"找到了需要的cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-Cookie值的修改"><a href="#4-Cookie值的修改" class="headerlink" title="4.Cookie值的修改"></a>4.Cookie值的修改</h5><p><strong><em>方案一</em></strong></p><ul><li>先创建一个要修改的同名的Cookie对象</li><li>在构造器，同时赋于新的cookie的值</li><li>调用response.addCookie(Cookie);</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updateCookie</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                - 先创建一个要修改的同名的Cookie对象</span><span class="token comment" spellcheck="true">//                - 在构造器，同时赋于新的cookie的值</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"newValue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                - 调用response.addCookie(Cookie);</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Key1的值已经修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时浏览器Cookie的key1的值已经变化<br><img src="https://img-blog.csdnimg.cn/20200802095908367.png" alt="key1值发生变化"><br><strong><em>方案二</em></strong></p><ul><li>先查找到需要修改的Cookie对象</li><li>调用setValue()方法赋予新的Cookie的值</li><li>调用response.addCookie()通知客户端保存修改</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        - 先查找到需要修改的Cookie对象</span>        Cookie cookie <span class="token operator">=</span> CookieUtils<span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookie <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        - 调用setValue()方法赋予新的Cookie的值</span>            cookie<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"newValue2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        - 调用response.addCookie()通知客户端保存修改</span>            response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Key2的值已经修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>*==setValue(“值”)<br>值不应包含空格、方括号、圆括号、等号、逗号、双引号、斜杠、问号、at 符号、冒号和分号。空值在所有浏览器上的行为不一定相同。==，</em> 如需要使用中文，或以上字符需要进行BASE64转码 * **</p><h5 id="6-Cookie的生命控制"><a href="#6-Cookie的生命控制" class="headerlink" title="6.Cookie的生命控制"></a>6.Cookie的生命控制</h5><p>Cookie的生命控制指的是如何管理Cookie什么时候被销毁（删除）<br><strong>setMaxAge()</strong></p><ul><li>正数：表示在指定的秒数后过期；</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">life3600</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先找到要删除的cookie对象</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"life3600"</span><span class="token punctuation">,</span> <span class="token string">"life3600"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"已经创建了一个存活1小时的cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>负数：表示浏览器一旦关闭，Cookie就会被销毁（默认值是-1）。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">defaultCookie</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"defaultLife"</span><span class="token punctuation">,</span> <span class="token string">"defaultLife"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置存活时间</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>零：表示马上删除cookie</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deleteCookie</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先找到要删除的cookie对象</span>        Cookie cookie <span class="token operator">=</span> CookieUtils<span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookie <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用setMaxAge(0)</span>            cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示立即删除，不需要浏览器关闭</span>            <span class="token comment" spellcheck="true">//调用Response.addCookie（cookie）</span>            response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"key2的cookie已经被删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-Cookie有效路径Path的设置"><a href="#7-Cookie有效路径Path的设置" class="headerlink" title="7.Cookie有效路径Path的设置"></a>7.Cookie有效路径Path的设置</h5><p><strong><em>Cookie的path属性可以有效的过滤那些Cookie可以发送给服务器，那些不发。</em> Path属性是通过请求的地址来进行有效的过滤</strong></p><ul><li>例：CookieA    path=/工程路径<pre><code>   CookieB     path=/工程路径/abc</code></pre>请求地址如：</li></ul><pre><code>http://ip:port/工程路径/a.html</code></pre><p><strong>此时CookieA发送，CookieB不发送</strong></p><ul><li>例，请求地址如：<pre><code>http://ip:port/工程路径/abc/a.html</code></pre></li></ul><p><strong>此时CookieA发送，CookieB也发送</strong></p><p><strong><em>Session接下一篇</em></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Servlet </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-动态SQL</title>
      <link href="/2020/08/02/MyBatis-%E5%8A%A8%E6%80%81SQL/"/>
      <url>/2020/08/02/MyBatis-%E5%8A%A8%E6%80%81SQL/</url>
      
        <content type="html"><![CDATA[<h4 id="一、简介-amp-环境搭建"><a href="#一、简介-amp-环境搭建" class="headerlink" title="一、简介&amp;环境搭建"></a>一、简介&amp;环境搭建</h4><h5 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h5><p><strong>MyBatis最强大的特性之一就是它的动态SQL功能。</strong> 如果您有使用JDBC或任何类似框架的经验，您就会理解有条件地将SQL字符串连接在一起是多么痛苦，请确保不要忘记空格或忽略列列表末尾的逗号。处理动态SQL可能非常痛苦。虽然使用动态SQL永远不会成为问题，但是MyBatis使用了一种强大的动态SQL语言，可以在任何映射的SQL语句中使用。<br>在MyBatis的早期版本中，有很多元素需要了解和理解。MyBatis 3大大改进了这一点，现在可以使用的元素还不到一半。MyBatis使用强大的基于<a href="http://commons.apache.org/proper/commons-ognl/language-guide.html" target="_blank" rel="noopener">OGNL</a>的表达式来消除大部分其他元素:<br>                    •  if<br>                    • choose (when, otherwise)<br>                    • trim (where, set)<br>                    • foreach</p><h5 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h5><p>编写XML文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.dao.EmployeeMapperDynamicSQl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--namespace的值为接口的全类名--></span>    <span class="token comment" spellcheck="true">&lt;!-- •    if         •    choose (when, otherwise):分支选择;带了break的switch-case                 如果带了id就用id查，带了lastname就用lastName查         •    trim (where(封装查询条件), set(封装修改条件))         •    foreach     --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、if判断"><a href="#二、if判断" class="headerlink" title="二、if判断"></a>二、if判断</h4><p><em>条件：查询员工，携带了哪个字段查询条件就带上这个字段的值</em><br><strong>接口编写</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapperDynamicSQl</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//携带哪个字段查询条件就带上这个字段</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getEmpsTestInnerParameter</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接口实现编写</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.dao.EmployeeMapperDynamicSQl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- public List&lt;Employee> getEmpsByConditionIf(Employee employee); --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsByConditionIf<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from tab1_employee          where          <span class="token comment" spellcheck="true">&lt;!--test:判断表达式--></span>          <span class="token comment" spellcheck="true">&lt;!--test:判断表达式（OGNL）              从参数中取值进行判断              遇见特殊符号应该去写准转义字符                --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--判断id不为空是拼接到sql语句中--></span>                  id=#{id}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName!<span class="token punctuation">=</span>null &amp;amp;&amp;amp; lastName!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--如上和id判断一致--></span>                  and last_name like #{lastName}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email!<span class="token punctuation">=</span> null and email.trim()!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  and email =#{email}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- OGNL会进行字符串与数字的转换判断 “0”==0--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">=</span><span class="token punctuation">=</span>0 or gender<span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  and gender=#{gender]              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong><a href="https://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">提示：遇见特殊符号应该去写转义字符</a></strong></em><br><strong>测试程序</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Department<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>DepartmentMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperAnnotation<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperDynamicSQl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperPlus<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDynamicSQl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取sqlSessionFactory对象</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取sqlSession对象不会自动提交数据</span>        SqlSession openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取接口的实现类对象</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            EmployeeMapperDynamicSQl mapper <span class="token operator">=</span> openSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapperDynamicSQl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 测试if/where</span>            Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Admin"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees<span class="token operator">=</span>mapper<span class="token punctuation">.</span><span class="token function">getEmpsByConditionIf</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee emp <span class="token operator">:</span> employees<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            openSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong><br><em>测试类中给出的参数为 <strong>id</strong>和 <strong>name</strong></em><br><img src="https://img-blog.csdnimg.cn/20200518210340523.png" alt="执行结果"><br><strong>结论：</strong> 与测试程序给出的参数一致<br><strong>讨论</strong><br>==当实现接口的程序动态sql中的第一个参数不合法时，sql语句为<br>select * from tab1_employee where and last_name=#{LastName}== 这时就出现了问题，where条件后直接出现一个and，此时执行出现语法错误<br><img src="https://img-blog.csdnimg.cn/20200518211356749.png" alt="出现语法错误"><br><strong>解决办法</strong><br>查询的时候如果某些条件没带可能sql拼装会有问题<br><strong>1.给where后面加上1=1，以后的条件都and xxx</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.dao.EmployeeMapperDynamicSQl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- public List&lt;Employee> getEmpsByConditionIf(Employee employee); --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsByConditionIf<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from tab1_employee          where 1=1          <span class="token comment" spellcheck="true">&lt;!--test:判断表达式--></span>          <span class="token comment" spellcheck="true">&lt;!--test:判断表达式（OGNL）              从参数中取值进行判断              遇见特殊符号应该去写准转义字符                --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--判断id不为空是拼接到sql语句中--></span>                  and id=#{id}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName!<span class="token punctuation">=</span>null &amp;amp;&amp;amp; lastName!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--如上和id判断一致--></span>                  and last_name like #{lastName}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email!<span class="token punctuation">=</span> null and email.trim()!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  and email =#{email}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- OGNL会进行字符串与数字的转换判断 “0”==0--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">=</span><span class="token punctuation">=</span>0 or gender<span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  and gender=#{gender]              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此时执行</strong><br><img src="https://img-blog.csdnimg.cn/20200518212252780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="执行成功"><br><strong>2.mybatis推荐使用where标签来将所有的查询条件包括在内，mybatis就会where标签中拼装sql，多出来的and或者or去掉</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.dao.EmployeeMapperDynamicSQl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- public List&lt;Employee> getEmpsByConditionIf(Employee employee); --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsByConditionIf<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from tab1_employee          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--test:判断表达式--></span>          <span class="token comment" spellcheck="true">&lt;!--test:判断表达式（OGNL）              从参数中取值进行判断              遇见特殊符号应该去写准转义字符                --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--判断id不为空是拼接到sql语句中--></span>                  id=#{id}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName!<span class="token punctuation">=</span>null &amp;amp;&amp;amp; lastName!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--如上和id判断一致--></span>                  and last_name like #{lastName}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email!<span class="token punctuation">=</span> null and email.trim()!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  and email =#{email}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- OGNL会进行字符串与数字的转换判断 “0”==0--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">=</span><span class="token punctuation">=</span>0 or gender<span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  and gender=#{gender]              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此时执行</strong><br><img src="https://img-blog.csdnimg.cn/20200518212610544.png" alt="执行成功"><br><strong>讨论</strong><br>==当我们的sql语句中的<strong>and</strong>出现在条件后边的时候，当倒数第一个参数为null时select * from tab1_employee WHERE last_name like ? and== 此时最后多出一个and，出现语法错误<br><strong>测试</strong><br><img src="https://img-blog.csdnimg.cn/20200518213431657.png" alt="sql语句出现语法错误"><br><strong>结论：==where标签只会去掉第一个多出的and或者or==</strong> 此时就引出了另一个标签trim</p><h4 id="三、trim标签"><a href="#三、trim标签" class="headerlink" title="三、trim标签"></a>三、trim标签</h4><p><strong>编写接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapperDynamicSQl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getEmpsByConditionTrim</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编写接口实现</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.dao.EmployeeMapperDynamicSQl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- public List&lt;Employee> getEmpsByConditionTrim(Employee employee); --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsByConditionTrim<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from tab1_employee          <span class="token comment" spellcheck="true">&lt;!-- 后面多出的and或者or  where标签不能解决           prefix="":前缀，trim标签体是整个字符串拼串后的结果                       prefix给拼串后的整个字符串加一个前缀           prefixOverrides="" :前缀覆盖，去掉整个字符串前面多余的字符           suffix="" 后缀                       suffix给拼串后的整个字符串加一个后缀           suffixOverrides=""                       后缀覆盖：去掉整个字符串后面多余的字符--></span>           <span class="token comment" spellcheck="true">&lt;!-- trim自定义字符串截取规则:只要满足条件都拼串 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  id=#{id} and              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName!<span class="token punctuation">=</span>null &amp;amp;&amp;amp; lastName!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  last_name like #{lastName} and              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email!<span class="token punctuation">=</span> null and email.trim()!<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  email =#{email} and              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- OGNL会进行字符串与数字的转换判断 “0”==0--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">=</span><span class="token punctuation">=</span>0 or gender<span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  gender=#{gender]              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试程序</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Department<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>DepartmentMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperAnnotation<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperDynamicSQl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperPlus<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDynamicSQl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取sqlSessionFactory对象</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取sqlSession对象不会自动提交数据</span>        SqlSession openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取接口的实现类对象</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            EmployeeMapperDynamicSQl mapper <span class="token operator">=</span> openSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapperDynamicSQl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 测试trim</span>             Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"%e%"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>             List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees<span class="token operator">=</span>mapper<span class="token punctuation">.</span><span class="token function">getEmpsByConditionTrim</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee employee2 <span class="token operator">:</span> employees<span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            openSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong><br>原先where标签如果最后一个参数为空时，会多出and或者or出现sql语句语法错误，此时使用trim标签，会将多余的and删除，以下测试结果证实了这一说法<br><img src="https://img-blog.csdnimg.cn/20200518215113265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="测试成功"><br><strong>prefix=””:前缀，trim标签体是整个字符串拼串后的结果<br>prefix给拼串后的整个字符串加一个前缀<br>prefixOverrides=”” :前缀覆盖，去掉整个字符串前面多余的字符<br>suffix=”” 后缀 &nbsp;&nbsp;suffix给拼串后的整个字符串加一个后缀<br>suffixOverrides=””   &nbsp;&nbsp; 后缀覆盖：去掉整个字符串后面多余的字符</strong></p><h4 id="四、choose标签-只选择满足条件的其中一个"><a href="#四、choose标签-只选择满足条件的其中一个" class="headerlink" title="四、choose标签(只选择满足条件的其中一个)"></a>四、choose标签(<em>只选择满足条件的其中一个</em>)</h4><p><strong>编写接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapperDynamicSQl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getEmpByConditionChoose</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编写接口实现</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.dao.EmployeeMapperDynamicSQl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--choose：只选择满足条件的一个  --></span>      <span class="token comment" spellcheck="true">&lt;!-- public List&lt;Employee> getEmpByConditionChoose(Employee employee); --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByConditionChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from tab1_employee          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                      id=#{id}                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                      last_name like #{lastName}                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                      email=#{email}                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--其他条件--></span>                      gender=0                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试程序</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Department<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>DepartmentMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperAnnotation<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperDynamicSQl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperPlus<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDynamicSQl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取sqlSessionFactory对象</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取sqlSession对象不会自动提交数据</span>        SqlSession openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取接口的实现类对象</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            EmployeeMapperDynamicSQl mapper <span class="token operator">=</span> openSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapperDynamicSQl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"%e%"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 测试choose</span>              List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> emps<span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpByConditionChoose</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee employee2 <span class="token operator">:</span> emps<span class="token punctuation">)</span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            openSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong><br><em>此时只有name属性不为空，所以此时choose会选择姓名作为查询参数，以下测试结果证实这一说法</em>  <strong>如果一次带了多个参数（多个参数都不为null）则默认会选择第一个作为查询参数，如果所有参数都为null则默认执行其他条件即otherwise标签中的条件作为查询条件</strong><img src="https://img-blog.csdnimg.cn/20200518222141401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="测试成功"></p><h4 id="五、set标签和if标签结合做更新操作-封装修改条件"><a href="#五、set标签和if标签结合做更新操作-封装修改条件" class="headerlink" title="五、set标签和if标签结合做更新操作(封装修改条件)"></a>五、set标签和if标签结合做更新操作(<em>封装修改条件</em>)</h4><p><strong>接口编写</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapperDynamicSQl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接口实现编写</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.dao.EmployeeMapperDynamicSQl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          update tab1_employee           <span class="token comment" spellcheck="true">&lt;!-- set标签去除，号 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                last_name=#{lastName},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                email=#{email},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                gender=#{gender}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--trim做更新操作         &lt;trim prefix="set" suffixOverrides=",">            &lt;if test="lastName!=null">                last_name=#{lastName},            &lt;/if>            &lt;if test="email!=null">                email=#{email},            &lt;/if>            &lt;if test="gender!=null">                gender=#{gender}            &lt;/if>        &lt;/trim> --></span>        where id =#{id}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试程序</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Department<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>DepartmentMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperAnnotation<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperDynamicSQl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>EmployeeMapperPlus<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDynamicSQl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取sqlSessionFactory对象</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取sqlSession对象不会自动提交数据</span>        SqlSession openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取接口的实现类对象</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            EmployeeMapperDynamicSQl mapper <span class="token operator">=</span> openSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapperDynamicSQl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Admin"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 测试更新</span>            <span class="token comment" spellcheck="true">/*             * mapper.updateEmp(employee); openSession.commit();             */</span>            mapper<span class="token punctuation">.</span><span class="token function">updateEmp</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            openSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            openSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试</strong><br><img src="https://img-blog.csdnimg.cn/20200518223849779.png" alt="测试成功"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-映射文件</title>
      <link href="/2020/08/02/MyBatis-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/"/>
      <url>/2020/08/02/MyBatis-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_43775034/article/details/104564880" target="_blank" rel="noopener">增删改见上篇博客</a></p><h4 id="一、自增主键值的获取"><a href="#一、自增主键值的获取" class="headerlink" title="一、自增主键值的获取"></a>一、自增主键值的获取</h4><ul><li><strong>MySQL支持自增主键，自增主键值的获取mybatis也是利用statement.getGenratedKeys()获取</strong> *</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">insert</span> id<span class="token operator">=</span><span class="token string">"addEmp"</span> parameterType<span class="token operator">=</span><span class="token string">"emp"</span> useGeneratedKeys<span class="token operator">=</span><span class="token string">"true"</span> keyProperty<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> tab1_employee<span class="token punctuation">(</span>last_name<span class="token punctuation">,</span>email<span class="token punctuation">,</span>gender<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#{lastName},#{email},#{gender})</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">insert</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>useGeneratedKeys=”true”：使用自增主键获取主键值策略<br>keyProperty=”id”：指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给JavaBean的哪个属性，此例中表明将自增主键的值交给id属性</strong><br>使用以上属性时能获取到自增主键的值<br><img src="https://img-blog.csdnimg.cn/20200319212546481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="取出自增主键的值"><br>如不使用时<br><img src="https://img-blog.csdnimg.cn/20200319212802668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="获取不到自增主键对应的值"></p><h4 id="二、参数处理"><a href="#二、参数处理" class="headerlink" title="二、参数处理"></a>二、参数处理</h4><h5 id="1-单个参数"><a href="#1-单个参数" class="headerlink" title="1.单个参数"></a>1.单个参数</h5><p>对于单个参数时，mybatis不会做特殊处理，使用：<strong>#{参数名}</strong> 就可以取出其值，而不对单个参数时，大括号中的值无论写什么都不报错。<br><strong>传入值为对应的属性字段</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getEmpByTd"</span> resultType<span class="token operator">=</span><span class="token string">"emp"</span><span class="token operator">></span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab1_employee <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020031921351767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="传入参数为对应的属性字段"><br><strong>传入的值为任意时获取到的结果一致，说明单个参数时对应的大括号中的值可任意取值</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getEmpByTd"</span> resultType<span class="token operator">=</span><span class="token string">"emp"</span><span class="token operator">></span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab1_employee <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{abcd}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200319213712994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="传入参数为任意时"></p><h5 id="2-多个参数"><a href="#2-多个参数" class="headerlink" title="2.多个参数"></a>2.多个参数</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getEmpByIdAndLastName"</span> resultType<span class="token operator">=</span><span class="token string">"emp"</span><span class="token operator">></span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab1_employee <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id} and last_name=#{lastName}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200319215708258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="多个参数是mybatis会做特殊处理"><br>有上报错：绑定异常…….由此我们可以得出，mybatis在针对多个参数时<strong>会做特殊处理。</strong>多个参数会被封装成一个<em>map</em>而此时的 <strong>key</strong>就是param1，param2…….paramN,或者参数的索引也可以 <strong>#{}</strong> 就是从map中获取指定的key的值，此时我们将传入的参数改为param1，param2，测试如下：</p><h5 id="1-1使用param1-param2……-paramN作为参数传入sql语句中"><a href="#1-1使用param1-param2……-paramN作为参数传入sql语句中" class="headerlink" title="1.1使用param1,param2……..paramN作为参数传入sql语句中"></a>1.1使用param1,param2……..paramN作为参数传入sql语句中</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getEmpByIdAndLastName"</span> resultType<span class="token operator">=</span><span class="token string">"emp"</span><span class="token operator">></span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab1_employee <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{param1} and last_name=#{param2}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>此时查询的数据达到目的</strong><br><img src="https://img-blog.csdnimg.cn/2020031921532569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="通过param传入参数"><br>但是参数为param时，我们的sql语句看起来没有见名知意的意思了而且在参数很多的情况下很费事，所以我们还是想使用数据库对应的实体类的字段作为参数传入sql语句中，这样让他人也很容易看懂，因此还有如下一种方法。</p><h5 id="1-2命名参数：明确指定封装参数时map的key"><a href="#1-2命名参数：明确指定封装参数时map的key" class="headerlink" title="1.2命名参数：明确指定封装参数时map的key"></a>1.2命名参数：明确指定封装参数时map的key</h5><p><em>使用 <strong>@Param</strong> 明确指定传入sql语句的参数，此时的key就是param注解指定的值而value还是我们传入的参数值</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Employee <span class="token function">getEmpByIdAndLastName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"lastName"</span><span class="token punctuation">)</span> String lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getEmpByIdAndLastName"</span> resultType<span class="token operator">=</span><span class="token string">"emp"</span><span class="token operator">></span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab1_employee <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id} and last_name=#{lastName}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时做查询测试：<br><img src="https://img-blog.csdnimg.cn/20200319220652504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="使用Param注解指定参数的key"><br><em>如果说是多个参数正好是我们业务逻辑的数据模型，我们直接将参数封装为对象，传入sql语句中</em></p><h5 id="1-3将多个参数以pojo的方式传入"><a href="#1-3将多个参数以pojo的方式传入" class="headerlink" title="1.3将多个参数以pojo的方式传入"></a>1.3将多个参数以pojo的方式传入</h5><p>#{属性名}：取出传入的pojo的属性值<br>如果多个参数组合不是数据模型中的数据，没有对应的pojo，为了方便我们可以传入map</p><h5 id="1-4将多个参数以map的形式传入"><a href="#1-4将多个参数以map的形式传入" class="headerlink" title="1.4将多个参数以map的形式传入"></a>1.4将多个参数以map的形式传入</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Employee <span class="token function">getEmpByMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getEmpByMap"</span> resultType<span class="token operator">=</span><span class="token string">"emp"</span><span class="token operator">></span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab1_employee <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id} and last_name=#{lastName}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>查询得到预期效果</em><br><img src="https://img-blog.csdnimg.cn/2020031922184251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="以map作为参数"></p><h5 id="1-5编写一个TO来作为参数"><a href="#1-5编写一个TO来作为参数" class="headerlink" title="1.5编写一个TO来作为参数"></a>1.5编写一个TO来作为参数</h5><p>如果多个参数不是业务模型中的数据，但是经常使用，推荐来编写一个TO(Transfer Object)数据传输对象。</p><p>=========================================================<br>思考以下场景中参数如何取值</p><ul><li>1.<strong>单个参数有@Param注解</strong><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Employee <span class="token function">getEmp</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">,</span>String LastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取值：id=====》#{id/param1} lastName======》#{param2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>2.<strong>第二个参数以对象的方式传入</strong><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Employee <span class="token function">getEmp</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取值：id===>#{param1}   lastName===>#{param2.lastName/e.lastName}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>3.<strong>特别注意，如果是Collection（List，Set）类型或者数组也会做特殊处理，也是把传入的list或者数组封装在map中</strong><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Employee <span class="token function">getEmpById</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//取值：取出第一个id值，  #{list[0]}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><strong>总结：</strong> 当参数多时会封装为map，为了不混乱，我们可以使用@Param来指定封装时使用的key，#{key}就可以取出map中的值。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-HelloWorld</title>
      <link href="/2020/08/02/MyBatis-HelloWorld/"/>
      <url>/2020/08/02/MyBatis-HelloWorld/</url>
      
        <content type="html"><![CDATA[<h4 id="一、下载MyBatis"><a href="#一、下载MyBatis" class="headerlink" title="一、下载MyBatis"></a>一、下载MyBatis</h4><p>MyBatis将所有的项目托管到了github上，因此我们在github上搜索下载<a href="https://github.com/mybatis/mybatis-3/releases">MyBatis下载</a><br><img src="https://img-blog.csdnimg.cn/20200228214206801.png" alt="下载文件"></p><h4 id="二、创建对应的数据库表和JavaBean类"><a href="#二、创建对应的数据库表和JavaBean类" class="headerlink" title="二、创建对应的数据库表和JavaBean类"></a>二、创建对应的数据库表和JavaBean类</h4><p><strong>创建数据表：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab1_employee（    id     <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    last_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gender CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建对应的JavaBean类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span>Alias<span class="token punctuation">;</span><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"emp"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意此处与数据中的字段并不对应???</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String lastName<span class="token punctuation">,</span> String email<span class="token punctuation">,</span> String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastName</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Employee [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", lastName="</span> <span class="token operator">+</span> lastName <span class="token operator">+</span> <span class="token string">", email="</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token string">", gender="</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、根据官方文档（下文按照官方文档的步骤实现一个”HelloWorld”）"><a href="#三、根据官方文档（下文按照官方文档的步骤实现一个”HelloWorld”）" class="headerlink" title="三、根据官方文档（下文按照官方文档的步骤实现一个”HelloWorld”）"></a>三、根据官方文档（下文按照官方文档的步骤实现一个”HelloWorld”）</h4><p>官方文档在一开始下载的依赖和文档中有，如果没有可以到以下地址下载<br><a href="https://pan.baidu.com/s/19dmyJmV2uqA6eVvwzCNEww" target="_blank" rel="noopener">官方文档下载链接</a>   <em>提取码：<strong>hpaq</strong></em>  内附有Mybatis文档与依赖包</p><h5 id="1-导入相关依赖"><a href="#1-导入相关依赖" class="headerlink" title="1.导入相关依赖"></a>1.导入相关依赖</h5><p><strong>引入MyBatis的jar包,以及操作数据库驱动的jar包，为显示方便引入log4j日志包，引入log4j时必须要在类路径下放一个log4j.xml文件（在以上的链接中有这些jar包）</strong></p><h5 id="2-创建一个xml文件（全局配置文件）-Building-SqlSessionFactory-from-XML"><a href="#2-创建一个xml文件（全局配置文件）-Building-SqlSessionFactory-from-XML" class="headerlink" title="2.创建一个xml文件（全局配置文件）[ Building SqlSessionFactory from XML]"></a>2.创建一个xml文件（全局配置文件）[ Building SqlSessionFactory from XML]</h5><p><strong>创建一个xml文件（mybatis-config.xml）</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//数据源连向我们自己的数据库        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis_plus<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234567890<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--sql映射文件一定要注册在全局配置文件中(就是此文件中)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmployeeMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-根据xml文件创建一个SqlSessionFactory对象"><a href="#3-根据xml文件创建一个SqlSessionFactory对象" class="headerlink" title="3.根据xml文件创建一个SqlSessionFactory对象"></a>3.根据xml文件创建一个SqlSessionFactory对象</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//此处的resource内容就是上面创建的xml文件的路径名</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>       String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>       InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-获取sqlSession实例，能直接执行已经映射的sql语句"><a href="#4-获取sqlSession实例，能直接执行已经映射的sql语句" class="headerlink" title="4.获取sqlSession实例，能直接执行已经映射的sql语句"></a>4.获取sqlSession实例，能直接执行已经映射的sql语句</h5><pre class="line-numbers language-java"><code class="language-java">       SqlSession openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-用获取的sqlSession调用增删改查的方法-Acquiring-a-SqlSession-from-SqlSessionFactory"><a href="#5-用获取的sqlSession调用增删改查的方法-Acquiring-a-SqlSession-from-SqlSessionFactory" class="headerlink" title="5.用获取的sqlSession调用增删改查的方法 [Acquiring a SqlSession from SqlSessionFactory]"></a>5.用获取的sqlSession调用增删改查的方法 [Acquiring a SqlSession from SqlSessionFactory]</h5><pre class="line-numbers language-yaml"><code class="language-yaml">//第一个参数值为sql映射文件中*<span class="token important">*namespace</span>+具体增删改查对应的唯一id的值**//第二个参数是执行sql时传入的参数openSession.selectOne(arg0<span class="token punctuation">,</span>arg1);//查询openSession.delete(arg0<span class="token punctuation">,</span>arg1);//删除openSession.update(arg0<span class="token punctuation">,</span>arg1);//更新openSession.insert(arg0<span class="token punctuation">,</span>arg1);//插入//第一个参数 <span class="token important">*statement</span>是一个唯一标识<span class="token punctuation">:</span>Unique identifier matching the statement to use.//第二个参数<span class="token important">*parameter</span>是执行sql语句的一个参数<span class="token punctuation">:</span>A parameter object to pass to the statement.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-创建sql映射的xml文件-Exploring-Mapped-SQL-Statements"><a href="#6-创建sql映射的xml文件-Exploring-Mapped-SQL-Statements" class="headerlink" title="6.创建sql映射的xml文件  [Exploring Mapped SQL Statements]"></a>6.创建sql映射的xml文件  [Exploring Mapped SQL Statements]</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.example.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           select id,last_name lastName,gender,email from tab1_employee where id = #{id}       <span class="token comment" spellcheck="true">&lt;!--给数据库变量起别名解决字段不匹配问题--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【namespace】:名称空间用来映射sql语句的类的全类名</strong><br><strong>【id】:为select的唯一标识，内容为具体方法的方法名</strong><br><strong>【resultType】:返回值类型，查询完成之后要返回的类型</strong><br><strong>【#{id}】:从传递过来的参数中取出id值</strong></p><h5 id="7-完整文件"><a href="#7-完整文件" class="headerlink" title="7.完整文件"></a>7.完整文件</h5><p><strong>mybatis-config.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--数据库连接池--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis_plus<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234567890<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmployeeMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>EmployeeMapper.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 查询数据  --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tab1_emp where id = #{id}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 插入数据  --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.bean.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into tab1_emp(last_name,email,gender) values(#{lastName},#{email},#{gender})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 更新数据  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update tab1_emp         set last_name=#{lastName},email=#{email},gender=#{gender}        where id =#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 删除数据  --></span>    <span class="token comment" spellcheck="true">&lt;!-- public void deleteEmpByTd(Integer id);  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from tab1_emp where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>log4j.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">log4j:</span>configuration</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>log4j</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://jakarta.apache.org/log4j/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.log4j.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Encoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.log4j.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ConversionPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%-5p %d{MM-dd HH:mm:ss,SSS} %m  (%F:%L) \n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">log4j:</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、进行测试"><a href="#四、进行测试" class="headerlink" title="四、进行测试"></a>四、进行测试</h4><p><strong>测试类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取sqlsession实例，能直接执行已经映射的sql语句</span>        SqlSession session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            Object employee = session.selectOne("com.atorg.mybatis.EmployeeMapper.selectEmp", 5);</span><span class="token comment" spellcheck="true">//            System.out.println(employee);</span><span class="token comment" spellcheck="true">//            session.insert("com.atorg.mybatis.EmployeeMapper.addEmp", new Employee("Jack","Jack@qq.com","1"));</span><span class="token comment" spellcheck="true">//            session.commit();</span><span class="token comment" spellcheck="true">//            System.out.println("插入成功");</span><span class="token comment" spellcheck="true">//            session.delete("com.atorg.mybatis.EmployeeMapper.deleteEmp", 5);</span><span class="token comment" spellcheck="true">//            session.commit();</span><span class="token comment" spellcheck="true">//            System.out.println("删除成功");</span>            session<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"com.atorg.mybatis.EmployeeMapper.updateEmp"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"lucy"</span><span class="token punctuation">,</span><span class="token string">"lucy@qq.com"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看数据库原始状态</strong></p><p><img src="https://img-blog.csdnimg.cn/20200229002257422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="数据库原始数据"><br><strong>测试添加方法（ “Bob”,”<a href="mailto:Bob@163.com" target="_blank" rel="noopener">Bob@163.com</a>“,”0” ）</strong><br><img src="https://img-blog.csdnimg.cn/20200229002650993.png" alt="添加方法"><br><img src="https://img-blog.csdnimg.cn/20200229002727945.png" alt="数据库添加的数据"><br><strong>测试查询方法（查询5号）</strong><br><img src="https://img-blog.csdnimg.cn/20200229003100687.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200229003241346.png" alt="数据库信息"><br><strong>测试删除方法(删除5号)</strong><br><img src="https://img-blog.csdnimg.cn/20200229003647688.png" alt="控制台信息"><br><img src="https://img-blog.csdnimg.cn/20200229003725869.png" alt="数据库信息减少"><br><strong>测试跟新方法（更新1号【”Jack”,”<a href="mailto:Jack@git.com" target="_blank" rel="noopener">Jack@git.com</a>“,”1”】）</strong><br><img src="https://img-blog.csdnimg.cn/20200229004115202.png" alt="控制台信息"><br><img src="https://img-blog.csdnimg.cn/20200229004200703.png" alt="数据库信息"></p><h4 id="五、升级-Using-an-interface-e-g-BlogMapper-class-that-properly-describes-the-parameter-and-return-value-for-a-given-statement"><a href="#五、升级-Using-an-interface-e-g-BlogMapper-class-that-properly-describes-the-parameter-and-return-value-for-a-given-statement" class="headerlink" title="五、升级[Using an interface (e.g. BlogMapper.class) that properly describes the parameter and return value for a given statement]"></a>五、升级[Using an interface (e.g. BlogMapper.class) that properly describes the parameter and return value for a given statement]</h4><p>使用上述代码可以实现对数据库的增删改查操作，但是我们在测试类中传入参数很麻烦，因此我们引进了<strong>接口式编程</strong>，<em>我们可以创建一个接口，接口来描述我们给定的sql语句的参数和返回值</em></p><h6 id="1-创建一个接口"><a href="#1-创建一个接口" class="headerlink" title="1.创建一个接口"></a>1.创建一个接口</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmpByTd</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteEmpByTd</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>mybatis提供一个特殊的功能，接口可以与配置文件进行动态绑定</strong></em><br><strong>【namespce】:指定为接口的全类名</strong><br><strong>【id】:增删改查标签的id指定为接口对应的方法名</strong></p><h6 id="2-此时的测试类（以查询为例其他类似）"><a href="#2-此时的测试类（以查询为例其他类似）" class="headerlink" title="2.此时的测试类（以查询为例其他类似）"></a>2.此时的测试类（以查询为例其他类似）</h6><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取sqlsession实例，能直接执行已经映射的sql语句</span>        SqlSession openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>        EmployeeMapper eMapper<span class="token operator">=</span>openSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee employee<span class="token operator">=</span>eMapper<span class="token punctuation">.</span><span class="token function">getEmpByTd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接调用接口的查询员工方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            openSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【getMapper】：会为接口自动创建一个代理对象，用得到的代理对象去调用接口的增删改查放方法</strong><br><strong><em>查询结果</em></strong><br><img src="https://img-blog.csdnimg.cn/20200229011036888.png" alt="查询结果"><br><img src="https://img-blog.csdnimg.cn/20200229011128516.png" alt="数据库信息"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础（中-2）</title>
      <link href="/2020/02/24/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD-2%EF%BC%89/"/>
      <url>/2020/02/24/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD-2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="9-视图的引入"><a href="#9-视图的引入" class="headerlink" title="9.视图的引入"></a>9.视图的引入</h4><p>==视图是原始数据库数据的一种变换，是查看表中数据的另外一种方式。可以将视图看成是一个移动的窗口，通过它可以看到感兴趣的数据。 视图是从一个或多个实际表中获得的，这些表的数据存放在数据库中。那些用于产生视图的表叫做该视图的基表。一个视图也可以从另一个视图中产生。==<br><strong>当通过视图修改数据时，实际上是在改变基表中的数据；相反地，基表数据的改变也会自动反映在由基表产生的视图中。</strong></p><p><strong>引入视图的作用：</strong><br>==安全：有的数据是需要保密的，如果直接把表给出来进行操作会造成泄密，那么可以通过创建视图把相应视图的权限给出来即可保证数据的安全。<br>高效：复杂的连接查询，每次执行时效率比较低，可以考虑新建视图，每次从视图中获取，将会提高效率 ==</p><h5 id="9-1-创建视图（实例）"><a href="#9-1-创建视图（实例）" class="headerlink" title="9.1 创建视图（实例）"></a>9.1 创建视图（实例）</h5><h6 id="在单表上创建视图"><a href="#在单表上创建视图" class="headerlink" title="在单表上创建视图"></a>在单表上创建视图</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v1 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建视图</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v2 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> bookName<span class="token punctuation">,</span>price <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v3<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> bookName<span class="token punctuation">,</span>price <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在单表上创建视图，（b,p）为字段创建别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="在多表上创建视图"><a href="#在多表上创建视图" class="headerlink" title="在多表上创建视图"></a>在多表上创建视图</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v4 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> bookName<span class="token punctuation">,</span>bookTypeName <span class="token keyword">FROM</span> t_book<span class="token punctuation">,</span>t_bookType <span class="token keyword">WHERE</span> t_book<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>t_bookType<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v5 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> tb<span class="token punctuation">.</span>bookName<span class="token punctuation">,</span>tby<span class="token punctuation">.</span>bookTypeName <span class="token keyword">FROM</span> t_book tb<span class="token punctuation">,</span>t_bookType tby <span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>tby<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DESCRIBE</span><span class="token punctuation">(</span>简写<span class="token keyword">DESC</span><span class="token punctuation">)</span> v5<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查看视图基本信息</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'v5'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查看视图基本信息</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v5<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查看视图详细信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACE <span class="token keyword">VIEW</span> v1<span class="token punctuation">(</span>bookName<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> bookName<span class="token punctuation">,</span>price <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用CREATE OR REPLACE VIEW修改视图</span><span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> v1 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用ALTER语句修改视图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="插入视图"><a href="#插入视图" class="headerlink" title="插入视图"></a>插入视图</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> v1 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'java good'</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token string">'feng'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在视图中插入视图，视图是一张虚表</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="更新视图（更新视图是指通过视图来插入（INSERT）、更新（UPDATE）和删除（DELETE）表中的数据。因为视图是一个虚拟的表，其中没有数据。通过视图更新时，都是转换基本表来更新。更新视图时，只能更新权限范围内的数据。超出了范围，就不能更新。）"><a href="#更新视图（更新视图是指通过视图来插入（INSERT）、更新（UPDATE）和删除（DELETE）表中的数据。因为视图是一个虚拟的表，其中没有数据。通过视图更新时，都是转换基本表来更新。更新视图时，只能更新权限范围内的数据。超出了范围，就不能更新。）" class="headerlink" title="更新视图（更新视图是指通过视图来插入（INSERT）、更新（UPDATE）和删除（DELETE）表中的数据。因为视图是一个虚拟的表，其中没有数据。通过视图更新时，都是转换基本表来更新。更新视图时，只能更新权限范围内的数据。超出了范围，就不能更新。）"></a>更新视图（更新视图是指通过视图来插入（INSERT）、更新（UPDATE）和删除（DELETE）表中的数据。因为视图是一个虚拟的表，其中没有数据。通过视图更新时，都是转换基本表来更新。更新视图时，只能更新权限范围内的数据。超出了范围，就不能更新。）</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> v1 <span class="token keyword">SET</span> bookName<span class="token operator">=</span><span class="token string">'java very good'</span><span class="token punctuation">,</span>price<span class="token operator">=</span><span class="token number">200</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新视图中的表</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="删除视图中的数据"><a href="#删除视图中的数据" class="headerlink" title="删除视图中的数据"></a>删除视图中的数据</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> v1 <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除视图中的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> v4<span class="token punctuation">;</span><span class="token comment" spellcheck="true">///删除视图</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-触发器的引入"><a href="#10-触发器的引入" class="headerlink" title="10.触发器的引入"></a>10.触发器的引入</h4><p>==触发器是与表事件相关的特殊的存储过程，它的执行不是由程序调用，也不是手工启动，而是由事件来触发，比如当对一个表进行操作（ insert，delete， update）时就会激活它执行。触发器可以查询其他表，而且可以包含复杂的SQL语句。它们主要用于强制服从复杂的业务规则或要求。==</p><h5 id="10-1创建与使用触发器（实例）"><a href="#10-1创建与使用触发器（实例）" class="headerlink" title="10.1创建与使用触发器（实例）"></a>10.1创建与使用触发器（实例）</h5><h6 id="创建只有一个语句的触发器"><a href="#创建只有一个语句的触发器" class="headerlink" title="创建只有一个语句的触发器"></a>创建只有一个语句的触发器</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trig_book <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span>      <span class="token keyword">ON</span> t_book <span class="token keyword">FOR EACH ROW</span>       <span class="token keyword">UPDATE</span> t_bookType <span class="token keyword">SET</span> bookNum<span class="token operator">=</span>bookNum<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> new<span class="token punctuation">.</span>bookTypeId<span class="token operator">=</span>t_bookType<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建只有一个语句的触发器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="创建有多个执行语句的触发器"><a href="#创建有多个执行语句的触发器" class="headerlink" title="创建有多个执行语句的触发器"></a>创建有多个执行语句的触发器</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token operator">|</span>（默认情况下，不可能等到用户把这些语句全部输入完之后，再执行整段语句。因为mysql一遇到分号，它就要自动执行。）<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trig_book2 <span class="token keyword">AFTER</span> <span class="token keyword">DELETE</span>      <span class="token keyword">ON</span> t_book <span class="token keyword">FOR EACH ROW</span>      <span class="token keyword">BEGIN</span>          <span class="token keyword">UPDATE</span> t_bookType <span class="token keyword">SET</span> bookNum<span class="token operator">=</span>bookNum<span class="token number">-1</span> <span class="token keyword">WHERE</span> old<span class="token punctuation">.</span>bookTypeId<span class="token operator">=</span>t_bookType<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>          <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_log <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'在book表中删除了一条数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_test <span class="token keyword">WHERE</span> old<span class="token punctuation">.</span>bookTypeId<span class="token operator">=</span>t_test<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>      <span class="token keyword">END</span> <span class="token operator">|</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建有多个执行语句的触发器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DELIMITER的详细用法转：<a href="https://www.cnblogs.com/nickup/p/6628892.html" target="_blank" rel="noopener">DELIMITER详细</a></p><h6 id="查看触发器1"><a href="#查看触发器1" class="headerlink" title="查看触发器1"></a>查看触发器1</h6><pre><code>SHOW TRIGGERS;//查看所有的触发器)</code></pre><h6 id="查看触发器2（第二种方法是在系统表里查看触发器）"><a href="#查看触发器2（第二种方法是在系统表里查看触发器）" class="headerlink" title="查看触发器2（第二种方法是在系统表里查看触发器）"></a>查看触发器2（第二种方法是在系统表里查看触发器）</h6><p><img src="https://img-blog.csdnimg.cn/20190925180132660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="在系统表里查看触发器"></p><h6 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> trig_book <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除触发器</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础（下）</title>
      <link href="/2020/02/24/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2020/02/24/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="11-MySQL-常用函数"><a href="#11-MySQL-常用函数" class="headerlink" title="11.MySQL 常用函数"></a>11.MySQL 常用函数</h4><h5 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CURTIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>MONTH<span class="token punctuation">(</span>birthday<span class="token punctuation">)</span> <span class="token keyword">AS</span> m <span class="token keyword">FROM</span> t_data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回当前日期，时间，返回birthday中的月份值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> userName<span class="token punctuation">,</span>CHAR_LENGTH<span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">,</span>UPPER<span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">,</span>LOWER<span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_data；<span class="token comment" spellcheck="true">//计算userName字符串的字符个数（UPPER（s）把s中所有字母变成大写）（LOWER（s）把s中所有字母变成小写）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> num<span class="token punctuation">,</span>ABS<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求绝对值</span><span class="token keyword">SELECT</span> SQRT<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求平方根</span><span class="token keyword">SELECT</span> MOD<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求余</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h5><p><strong>1，PASSWORD(str) 一般对用户的密码加密 不可逆不能复原<br>2，MD5(str) 普通加密 不可逆不能复原<br>3，ENCODE(str，pswd_str) 加密函数，结果是一个二进制数，必须使用 BLOB 类型的字段来保存它；<br>4，DECODE(crypt_str，pswd_str) 解密函数；</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_data <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2019-9-21'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>PASSWORD<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一般对用户的密码加密，不可逆不能复原</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_data <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2019-9-21'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MD5<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//普通加密，不可逆不能复原</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_data <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2019-9-21'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MD5<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ENCODE<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加密函数，结果是一个二进制数，必须用BLOB类型的字段来保存它</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_data <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2019-9-21'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MD5<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ENCODE<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> pp <span class="token keyword">FROM</span> t_data <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> DECODE<span class="token punctuation">(</span>pp<span class="token punctuation">,</span><span class="token string">'aa'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_data <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解密函数，将pp解密为原来的可见密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-存储过程和函数（实例）"><a href="#12-存储过程和函数（实例）" class="headerlink" title="12. 存储过程和函数（实例）"></a>12. 存储过程和函数（实例）</h4><h5 id="存储过程的引用"><a href="#存储过程的引用" class="headerlink" title="存储过程的引用"></a>存储过程的引用</h5><p>==存储过程是一组为了完成特定功能的SQL 语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。==</p><h5 id="函数的引入"><a href="#函数的引入" class="headerlink" title="函数的引入"></a>函数的引入</h5><p>==数据库函数是指当需要分析数据清单中的数值是否符合特定条件时，使用数据库工作表函数。==</p><h6 id="12-1创建存储过程"><a href="#12-1创建存储过程" class="headerlink" title="12.1创建存储过程"></a>12.1创建存储过程</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span>    <span class="token punctuation">[</span><span class="token keyword">DEFINER</span> <span class="token operator">=</span> { <span class="token keyword">user</span> <span class="token operator">|</span> <span class="token keyword">CURRENT_USER</span> }<span class="token punctuation">]</span>　<span class="token keyword">PROCEDURE</span> sp_name <span class="token punctuation">(</span><span class="token punctuation">[</span>proc_parameter<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span>characteristic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> routine_bodyproc_parameter:    <span class="token punctuation">[</span> <span class="token operator">IN</span> <span class="token operator">|</span> <span class="token keyword">OUT</span> <span class="token operator">|</span> <span class="token keyword">INOUT</span> <span class="token punctuation">]</span> param_name <span class="token keyword">type</span>characteristic:    <span class="token keyword">COMMENT</span> <span class="token string">'string'</span>  <span class="token operator">|</span> <span class="token keyword">LANGUAGE SQL</span>  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token keyword">DETERMINISTIC</span>  <span class="token operator">|</span> { <span class="token keyword">CONTAINS</span> SQL <span class="token operator">|</span> <span class="token keyword">NO SQL</span> <span class="token operator">|</span> <span class="token keyword">READS SQL DATA</span> <span class="token operator">|</span> <span class="token keyword">MODIFIES SQL DATA</span> }  <span class="token operator">|</span> SQL SECURITY { <span class="token keyword">DEFINER</span> <span class="token operator">|</span> <span class="token keyword">INVOKER</span> }routine_body:　　Valid SQL <span class="token keyword">routine</span> statement<span class="token punctuation">[</span>begin_label:<span class="token punctuation">]</span> <span class="token keyword">BEGIN</span>　　<span class="token punctuation">[</span>statement_list<span class="token punctuation">]</span>　　　　……<span class="token keyword">END</span> <span class="token punctuation">[</span>end_label<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">USE</span> db_book<span class="token keyword">DELIMITER</span> <span class="token operator">&amp;&amp;</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_book <span class="token punctuation">(</span><span class="token operator">IN</span> bT <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> count_num <span class="token keyword">INT</span><span class="token punctuation">)</span>      <span class="token keyword">READS SQL DATA</span><span class="token comment" spellcheck="true">//说明子程序使用SQL语句的限制是从begin开始到end结束</span>      <span class="token keyword">BEGIN</span>        <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> bookTypeId<span class="token operator">=</span>bT<span class="token punctuation">;</span>      <span class="token keyword">END</span>      <span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建存储过程PROCEDURE,用BEGIN和END来标志SQL代码的开始和结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用存储过程</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CALL</span> pro_book<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用存储过程</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="12-2创建存储函数"><a href="#12-2创建存储函数" class="headerlink" title="12.2创建存储函数"></a>12.2创建存储函数</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span> <span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>参数<span class="token number">1</span><span class="token operator">></span> <span class="token operator">&lt;</span>类型<span class="token number">1</span><span class="token operator">></span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token operator">&lt;</span>参数<span class="token number">2</span><span class="token operator">></span> <span class="token operator">&lt;</span>类型<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">]</span> … <span class="token punctuation">)</span>  <span class="token keyword">RETURNS</span> <span class="token operator">&lt;</span>类型<span class="token operator">></span>  <span class="token operator">&lt;</span>函数主体<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实例</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token operator">&amp;&amp;</span><span class="token operator">&amp;</span><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> func_book<span class="token punctuation">(</span>bookId <span class="token keyword">INT</span><span class="token punctuation">)</span>  <span class="token keyword">RETURNS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token keyword">BEGIN</span>      <span class="token keyword">RETURN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> bookName <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> id<span class="token operator">=</span>bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">END</span>  <span class="token operator">&amp;&amp;</span><span class="token operator">&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建函数func_book</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用存储函数</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> func_book<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="12-3变量的使用"><a href="#12-3变量的使用" class="headerlink" title="12.3变量的使用"></a>12.3变量的使用</h5><h6 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h6><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">DECLARE</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="为变量赋值"><a href="#为变量赋值" class="headerlink" title="为变量赋值"></a>为变量赋值</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token number">a</span><span class="token operator">=</span><span class="token string">'java1234'</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义变量并且为变量赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="13-游标的使用"><a href="#13-游标的使用" class="headerlink" title="13.游标的使用"></a>13.游标的使用</h4><p>==查询语句可能查询出多条记录，在存储过程和函数中使用游标来逐条读取查询结果集中的记录。游标的使用包括声明游标、打开游标、使用游标和关闭游标。游标必须声明在处理程序之前，并且声明在变量和条件之后==</p><h5 id="声明游标"><a href="#声明游标" class="headerlink" title="声明游标"></a>声明游标</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> cur_t_user2 <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> userName2<span class="token punctuation">,</span>password2 <span class="token keyword">FROM</span> t_user2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明游标</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="打开游标"><a href="#打开游标" class="headerlink" title="打开游标"></a>打开游标</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">OPEN</span> cur_t_user2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开游标）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">FETCH</span> cur_t_user2 <span class="token keyword">INTO</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用游标</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="关闭游标"><a href="#关闭游标" class="headerlink" title="关闭游标"></a>关闭游标</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CLOSE</span> cur_t_user2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭游标</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL（完）</title>
      <link href="/2020/02/24/MySQL%EF%BC%88%E5%AE%8C%EF%BC%89/"/>
      <url>/2020/02/24/MySQL%EF%BC%88%E5%AE%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="14-流程控制的使用（实例）"><a href="#14-流程控制的使用（实例）" class="headerlink" title="14.流程控制的使用（实例）"></a>14.流程控制的使用（实例）</h4><p>==存储过程和函数中可以使用流程控制来控制语句的执行。MySQL 中可以使用 IF 语句、CASE 语句、LOOP语句、LEAVE 语句、ITERATE 语句、REPEAT 语句和 WHILE 语句来进行流程控制==</p><h5 id="14-1（IF语句）"><a href="#14-1（IF语句）" class="headerlink" title="14.1（IF语句）"></a>14.1（IF语句）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token operator">&amp;&amp;</span><span class="token comment" spellcheck="true">//if语句</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_user5<span class="token punctuation">(</span><span class="token operator">IN</span> bookId <span class="token keyword">INT</span><span class="token punctuation">)</span>      <span class="token keyword">BEGIN</span>         <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token variable">@num</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> id<span class="token operator">=</span>bookId<span class="token punctuation">;</span>         <span class="token keyword">IF</span> <span class="token variable">@num</span><span class="token operator">></span><span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token keyword">UPDATE</span> t_user <span class="token keyword">SET</span> userName<span class="token operator">=</span><span class="token string">'java12345'</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span>bookId<span class="token punctuation">;</span>         <span class="token keyword">ELSE</span>             <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2312312'</span><span class="token punctuation">,</span><span class="token string">'23221312'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>      <span class="token keyword">END</span>      <span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14-2（case语句）"><a href="#14-2（case语句）" class="headerlink" title="14.2（case语句）"></a>14.2（case语句）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token operator">&amp;&amp;</span><span class="token comment" spellcheck="true">//case语句（@+变量可当作全局常量来理解）</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_user6<span class="token punctuation">(</span><span class="token operator">IN</span> bookId <span class="token keyword">INT</span><span class="token punctuation">)</span>      <span class="token keyword">BEGIN</span>         <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token variable">@num</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> id<span class="token operator">=</span>bookId<span class="token punctuation">;</span>         <span class="token keyword">CASE</span> <span class="token variable">@num</span>           <span class="token keyword">WHEN</span> <span class="token number">1</span> <span class="token keyword">THEN</span> <span class="token keyword">UPDATE</span> t_user <span class="token keyword">SET</span> userName<span class="token operator">=</span><span class="token string">'java12345'</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span>bookId<span class="token punctuation">;</span>           <span class="token keyword">WHEN</span> <span class="token number">2</span> <span class="token keyword">THEN</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2312312'</span><span class="token punctuation">,</span><span class="token string">'23221312'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">ELSE</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2312312123321'</span><span class="token punctuation">,</span><span class="token string">'232213121231132'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>      <span class="token keyword">END</span>      <span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14-3-（LOOP，LEAVE-语句）"><a href="#14-3-（LOOP，LEAVE-语句）" class="headerlink" title="14.3 （LOOP，LEAVE 语句）"></a>14.3 （LOOP，LEAVE 语句）</h5><p>==LOOP,LEAVE语句：LOOP 语句可以使某些特定的语句重复执行，实现一个简单的循环。但是 LOOP 语句本身没有停止循环的语句，必须是遇到 LEAVE 语句等才能停止循环。==</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token operator">&amp;&amp;</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_user7<span class="token punctuation">(</span><span class="token operator">IN</span> totalNum <span class="token keyword">INT</span><span class="token punctuation">)</span>      <span class="token keyword">BEGIN</span>         <span class="token number">aaa</span>:LOOP            <span class="token keyword">SET</span> totalNum<span class="token operator">=</span>totalNum<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token keyword">IF</span> totalNum<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">THEN</span> LEAVE <span class="token number">aaa</span><span class="token punctuation">;</span>            <span class="token keyword">ELSE</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user <span class="token keyword">VALUES</span><span class="token punctuation">(</span>totalNum<span class="token punctuation">,</span><span class="token string">'2312312'</span><span class="token punctuation">,</span><span class="token string">'23221312'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">END</span> <span class="token keyword">IF</span> <span class="token punctuation">;</span>         <span class="token keyword">END</span> LOOP <span class="token number">aaa</span><span class="token punctuation">;</span>      <span class="token keyword">END</span>      <span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14-4（ITERATE-语句）"><a href="#14-4（ITERATE-语句）" class="headerlink" title="14.4（ITERATE 语句）"></a>14.4（ITERATE 语句）</h5><p><strong>ITERATE 语句：ITERATE 语句也是用来跳出循环的语句。但是，ITERATE 语句是跳出本次循环，然后直接进入下一次循环。</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token operator">&amp;&amp;</span>（ITERATE 语句：ITERATE 语句也是用来跳出循环的语句。但是，ITERATE 语句是跳出本次循环，然后直接进入下一次循环。）<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_user8<span class="token punctuation">(</span><span class="token operator">IN</span> totalNum <span class="token keyword">INT</span><span class="token punctuation">)</span>      <span class="token keyword">BEGIN</span>         <span class="token number">aaa</span>:LOOP            <span class="token keyword">SET</span> totalNum<span class="token operator">=</span>totalNum<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token keyword">IF</span> totalNum<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">THEN</span> LEAVE <span class="token number">aaa</span><span class="token punctuation">;</span>            ELSEIF totalNum<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">THEN</span> ITERATE <span class="token number">aaa</span><span class="token punctuation">;</span>            <span class="token keyword">END</span> <span class="token keyword">IF</span> <span class="token punctuation">;</span>            <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user <span class="token keyword">VALUES</span><span class="token punctuation">(</span>totalNum<span class="token punctuation">,</span><span class="token string">'2312312'</span><span class="token punctuation">,</span><span class="token string">'23221312'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">END</span> LOOP <span class="token number">aaa</span><span class="token punctuation">;</span>      <span class="token keyword">END</span>      <span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14-5（REPEAT-语句）"><a href="#14-5（REPEAT-语句）" class="headerlink" title="14.5（REPEAT 语句）"></a>14.5（REPEAT 语句）</h5><p><strong>REPEAT 语句：REPEAT 语句是有条件控制的循环语句。当满足特定条件时，就会跳出循环语句。</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token operator">&amp;&amp;</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_user9<span class="token punctuation">(</span><span class="token operator">IN</span> totalNum <span class="token keyword">INT</span><span class="token punctuation">)</span>      <span class="token keyword">BEGIN</span>         REPEAT            <span class="token keyword">SET</span> totalNum<span class="token operator">=</span>totalNum<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user <span class="token keyword">VALUES</span><span class="token punctuation">(</span>totalNum<span class="token punctuation">,</span><span class="token string">'2312312'</span><span class="token punctuation">,</span><span class="token string">'23221312'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            UNTIL totalNum<span class="token operator">=</span><span class="token number">1</span>         <span class="token keyword">END</span> REPEAT <span class="token punctuation">;</span>      <span class="token keyword">END</span>      <span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14-6（WHILE-语句）"><a href="#14-6（WHILE-语句）" class="headerlink" title="14.6（WHILE 语句）"></a>14.6（WHILE 语句）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token operator">&amp;&amp;</span><span class="token comment" spellcheck="true">//WHILE 语句</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_user10<span class="token punctuation">(</span><span class="token operator">IN</span> totalNum <span class="token keyword">INT</span><span class="token punctuation">)</span>      <span class="token keyword">BEGIN</span>         <span class="token keyword">WHILE</span> totalNum<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">DO</span>             <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_user <span class="token keyword">VALUES</span><span class="token punctuation">(</span>totalNum<span class="token punctuation">,</span><span class="token string">'2312312'</span><span class="token punctuation">,</span><span class="token string">'23221312'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">SET</span> totalNum<span class="token operator">=</span>totalNum<span class="token number">-1</span><span class="token punctuation">;</span>         <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>      <span class="token keyword">END</span>      <span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="14-6-查看存储过程和函数-还可以在系统表中查看"><a href="#14-6-查看存储过程和函数-还可以在系统表中查看" class="headerlink" title="14.6 查看存储过程和函数(还可以在系统表中查看)"></a>14.6 查看存储过程和函数(还可以在系统表中查看)</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'pro_book'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查看存储过程和函数的状态</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_book<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//语句查看存储过程的函数的定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="14-7-修改存储过程和函数"><a href="#14-7-修改存储过程和函数" class="headerlink" title="14.7 修改存储过程和函数"></a>14.7 修改存储过程和函数</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">PROCEDURE</span> pro_book <span class="token keyword">COMMENT</span> <span class="token string">'我来测试一下comment'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改存储过程和函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="14-8-删除存储过程和函数"><a href="#14-8-删除存储过程和函数" class="headerlink" title="14.8 删除存储过程和函数"></a>14.8 删除存储过程和函数</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> pro_user10<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除存储过程和函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与消息</title>
      <link href="/2020/02/22/SpringBoot%E4%B8%8E%E6%B6%88%E6%81%AF/"/>
      <url>/2020/02/22/SpringBoot%E4%B8%8E%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>1、在大多数应用中，我们系统之间需要进行异步通信，即异步消息<img src="https://img-blog.csdnimg.cn/20200222103334968.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="异步消息回调机制"><br>2、异步消息中两个重要概念：<br>        消息代理（message broker）和目的地（destination）<br><strong>消息代理：</strong> 是一种在数据源与目的地之间移动数据使信息处理流畅的软件技术，也是一种架构模式，用于消息验证、变换、路由。<br><strong>目的地：</strong> 消息接受者。<br><em>当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。</em><br>3、异步消息主要有两种形式(point-to-point)</p><ul><li><p>1）、队列（queue）：点对点消息通信</p><ul><li>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列</li><li><strong>消息只有唯一的发送者和接收者，但并不是说只能有一个接收者。</strong></li></ul></li><li><p>2）、主题（topic）：发布（publish）/订阅（subscribe）消息通信</p><ul><li><strong>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题</strong>，那么就会在消息到达时同时收到消息。</li></ul></li></ul><p>4、JMS(Java Message Service) java消息服务<br>基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS的实现<br>5、AMQP（Advanced Message Queuing Protocol）</p><ul><li>高级消息队列协议，也是一个消息代理的规范，<strong>兼容JMS</strong></li><li>RabbitMQ是AMQP的实现</li></ul><h4 id="二、SpringBoot整合RabbitMQ"><a href="#二、SpringBoot整合RabbitMQ" class="headerlink" title="二、SpringBoot整合RabbitMQ"></a>二、SpringBoot整合RabbitMQ</h4><p>RabbitMQ简介：RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件），<em><strong>RabbitMQ是AMQP的一个开源实现</strong>_。<br>_核心概念：</em><br><strong>Producer&amp;Consumer</strong></p><ul><li>producer指的是消息的生产者，consumer消息的消费者。 </li></ul><p><strong>Broker</strong></p><ul><li>提供一种传输服务，他的角色就是维护一条从生产者到消费者的路线，保证数据能按照指定的方式进行传输。</li></ul><p><strong>Queue</strong></p><ul><li>消息队列，提供了FIFO的处理机制，具有缓存消息的能力。rabbitmq中，队列消息可以设置为持久化，临时或者自动删除。</li><li>设置为持久化队列，queue中的消息会在server本地硬盘存储一份，防止系统crash，数据丢失。</li><li>设置为临时队列，queue中的数据在系统重启之后就会丢失。</li><li>设置为自动删除的队列，当不存在用户连接到server，队列中的数据会被自动删除。</li></ul><p><strong>Exchange</strong></p><ul><li>消息交换机，指定消息按什么规则，路由到那个队列。</li><li>Exchange有4中类型：direct（默认），fanout，topic和headers，不同类型的Exchange转发消息的策略有所区别：</li></ul><p><strong>Binding</strong></p><ul><li>将一个特定的Exchange和一个特定的Queue绑定起来。</li><li>Exchange和Queue的绑定可以是多对多的关系。</li></ul><p><strong>Virtual host（vhosts）</strong></p><ul><li>在 rabbitmq server上可以创建多个虚拟机的message broker，又叫做virtual hosts（vhosts）。</li><li>每一个vhost本质上是一个mini-rabbitmq server，分别管理各自的exchange和bindings。</li><li>vhost相当于物理的server，可以为不同app提供边界隔离。</li><li>producer和consumer连接rabbit server需要指定一个vhost</li></ul><h4 id="三、RabbitMQ运行机制"><a href="#三、RabbitMQ运行机制" class="headerlink" title="三、RabbitMQ运行机制"></a>三、RabbitMQ运行机制</h4><p><img src="https://img-blog.csdnimg.cn/2020022211333668.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="RabbitMQ运行机制"></p><h4 id="四、SpringBoot整合RabbitMQ"><a href="#四、SpringBoot整合RabbitMQ" class="headerlink" title="四、SpringBoot整合RabbitMQ"></a>四、SpringBoot整合RabbitMQ</h4><h5 id="1-引入spring-boot-starter-amqp"><a href="#1-引入spring-boot-starter-amqp" class="headerlink" title="1.引入spring-boot-starter-amqp"></a>1.引入spring-boot-starter-amqp</h5><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-rabbit-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-在docker中下载rabbitmq的镜像"><a href="#2-在docker中下载rabbitmq的镜像" class="headerlink" title="2.在docker中下载rabbitmq的镜像"></a>2.在docker中下载rabbitmq的镜像</h5><p>1.在<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a>上搜索rabbitmq镜像，尽量安装带有management标志的(<em><strong>附带有web管理界面</strong></em>)<br><img src="https://img-blog.csdnimg.cn/20200222121939739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="在docker hub上搜索镜像"><br>2.拉取rabbitmq镜像</p><pre class="line-numbers language-shell"><code class="language-shell">docker pull rabbitmq:3-management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.查看下载镜像</p><pre class="line-numbers language-shell"><code class="language-shell">docker iamges                 //查看下载镜像<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200222123630529.png" alt="查看镜像"><br>4.启动运行镜像</p><pre class="line-numbers language-shell"><code class="language-shell">docker run -d -p 5672:5672 -p 15672:15672 --name myrabbitmq a64a4ae7bc1f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-d:表示后台运行<br>-p:表示暴露端口<br>5672:是客户端和rabbitmq进行通信的端口<br>15672:管理界面访问web页面的端口<br>==我的已经运行了我就直接启动==</p><p>5.查看所有的容器（无论运行还是停止都有）</p><pre class="line-numbers language-shell"><code class="language-shell">docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200222124428702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="查看所有容器"><br>6.启动容器</p><pre class="line-numbers language-shell"><code class="language-shell">docker start 37739ced79ed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.查看运行的容器（只包含运行的容器）</p><pre class="line-numbers language-shell"><code class="language-shell">docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![查看正在运行的容器]<a href="https://img-blog.csdnimg.cn/20200222124719445.png)](https://img-blog.csdnimg.cn/2020022212480088.png)" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20200222124719445.png)](https://img-blog.csdnimg.cn/2020022212480088.png)</a><br>输入192.168.43.186：15672（192.168.43.186虚拟机地址）访问rabbitmq的web管理页面 <em>** 默认密码和账号都是guest **</em><img src="https://img-blog.csdnimg.cn/20200222124935571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="访问rabbitmq的web管理页面"><br><img src="https://img-blog.csdnimg.cn/20200222125147238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="登陆界面"></p><h5 id="3-测试数据"><a href="#3-测试数据" class="headerlink" title="3.测试数据"></a>3.测试数据</h5><p>1.创建三个交换器<br><img src="https://img-blog.csdnimg.cn/20200222125907158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="创建三个交换器"><br>2.添加四个消息队列<br><img src="https://img-blog.csdnimg.cn/20200222130159997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="添加4个消息队列"><br><em><strong>我们创建的队列要是能工作我们就得与我们创建的交换器进行绑定（binding）</strong></em><br><em>在次列举exchange.direct与消息队列的绑定其余同理可得</em><br><img src="https://img-blog.csdnimg.cn/20200222130951228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="交换器与消息队列的绑定"><br><strong>测试：</strong><br><strong>1.</strong> exchange.direct（<em><strong>是完全匹配路由键的</strong>_）在exchange.direct交换器中发送消息<br><img src="https://img-blog.csdnimg.cn/20200222133313612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="发送消息进行测试"><br><strong>所以只有atorg一个消息队列能收到此消息</strong><img src="https://img-blog.csdnimg.cn/20200222133615530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="只有一个队列收到消息"><br><strong>点击atorg得到发送的消息</strong><img src="https://img-blog.csdnimg.cn/20200222133742480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="得到我们发送的消息"><br><strong>2.</strong> exchange.fanout（</em><strong>无论路由键是什么会发送给每一个消息队列</strong><em>）在exchange.fanout发送消息<br><img src="https://img-blog.csdnimg.cn/20200222134348853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="发送消息"><br><strong>每个消息队列都收到消息</strong><br><img src="https://img-blog.csdnimg.cn/20200222134312469.png" alt="每个消息队列都收到消息"><br><strong>3.</strong> exchange.topic（</em><strong>根据规则匹配</strong>_）在exchange.topic发送消息<br><img src="https://img-blog.csdnimg.cn/20200222135246673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="topic交换器根据规则匹配"><br><strong>查看消息队列发现每个消息队列的消息都增加了</strong><br><img src="https://img-blog.csdnimg.cn/20200222135429467.png" alt="查看消息队列"></p><h5 id="4-整合"><a href="#4-整合" class="headerlink" title="4.整合"></a>4.整合</h5><p>配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">spring.rabbitmq.addresses=192.168.43.186           <span class="token comment" spellcheck="true">#虚拟机地址</span>spring.rabbitmq.username=guest                     <span class="token comment" spellcheck="true">#rabbitmqweb页面账号和密码</span>spring.rabbitmq.password=guestspring.rabbitmq.port=5672<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在测试类进行发送数据测试</strong><br>在exchange.direct发送消息我们知道direct是完全匹配路由键故只有atorg.news收到消息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>    RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1.单播（点对点）     */</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Message需要自己构造一个;定义消息内容和消息头</span>        <span class="token comment" spellcheck="true">//rabbitTemplate.send(exchange, routeKey, message);</span>        <span class="token comment" spellcheck="true">//object默认当成消息体，只需要传入要发送的对象，自动序列化发送给rabbitmq</span>        <span class="token comment" spellcheck="true">//rabbitTemplate.convertAndSend(exchange, routeKey, object);</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"这是第一个消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对象被默认序列化以后发送出去（默认是以jdk序列化规则）</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"exchange.direct"</span><span class="token punctuation">,</span><span class="token string">"atorg.news"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在web端查看消息队列接收消息（只有atorg.news收到消息）</strong><br><em><em>我在次处理了序列化问题</em></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>Jackson2JsonMessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>MessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAMQPConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MessageConverter <span class="token function">messageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>管理页面得到发送的数据</strong><img src="https://img-blog.csdnimg.cn/20200222142421124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="只有atorg.news收到消息"><br><strong>在测试类进行接受数据测试</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接受数据，如何将数据自动转化为json发送出去</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Object o <span class="token operator">=</span> rabbitTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token string">"atorg.news"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处写路由键名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>控制台接收到数据</strong><br><img src="https://img-blog.csdnimg.cn/20200222142958857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="控制台接受数据"><br><em><strong>我们收到消息之后消息队列就没有此条消息了</strong></em><img src="https://img-blog.csdnimg.cn/20200222143135342.png" alt="rabbitmqweb管理页面查看消息"><br><strong>我们可以利用AmqpAdmin创建、删除Queue,Exchange Binding</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Autowired</span>    AmqpAdmin amqpAdmin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">creatExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   amqpAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span><span class="token function">newDirectExchange</span><span class="token punctuation">(</span><span class="token string">"amqbadmin.exchange"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建交换器</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   amqpAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"amqpadmin.queue"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建消息队列</span>   amqpAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"amqpadmin.queue"</span><span class="token punctuation">,</span> Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span> <span class="token string">"amqbadmin.exchange"</span><span class="token punctuation">,</span> <span class="token string">"amqp.haha"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建绑定规则</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看web管理页面的交换器</strong><br><img src="https://img-blog.csdnimg.cn/20200222144411189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="创建的交换器"><br><strong>查看web管理页面的消息队列</strong><br><img src="https://img-blog.csdnimg.cn/20200222144704874.png" alt="创建的消息队列"><br><strong>查看web管理页面的绑定规则</strong><br><img src="https://img-blog.csdnimg.cn/20200222144832494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="创建的绑定规则"><br><em><strong>有问题希望大家能多多斧正</strong></em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 消息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与缓存</title>
      <link href="/2020/02/22/SpringBoot%E4%B8%8E%E7%BC%93%E5%AD%98/"/>
      <url>/2020/02/22/SpringBoot%E4%B8%8E%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、SpringBoot与缓存"><a href="#一、SpringBoot与缓存" class="headerlink" title="一、SpringBoot与缓存"></a>一、SpringBoot与缓存</h3><h4 id="1、基础概念"><a href="#1、基础概念" class="headerlink" title="1、基础概念"></a>1、基础概念</h4><p><strong>缓存：缓存是指可以进行高速数据交换的存储器，它先于内存与CPU交换数据，因此速率很快。</strong><br><em>缓存作用：<strong>缓存的工作原理是当CPU要读取一个数据时，首先从CPU缓存中查找，找到就立即读取并送给CPU处理；没有找到，就从速率相对较慢的内存中读取并送给CPU处理，同时把这个数据所在的数据块调入缓存中，可以使得以后对整块数据的读取都从缓存中进行，不必再调用内存。（例：在数据库中利用缓存机制可以大大降低数据库的负压能力，当我们查询相同的数据时不用每一次都在数据库中查询，这时我们就可以利用缓存机制将第一次在数据库中查询的内容保存在缓存中，这样不仅提高了效率而且减少了数据库的负担）</strong></em></p><h4 id="2、搭建环境"><a href="#2、搭建环境" class="headerlink" title="2、搭建环境"></a>2、搭建环境</h4><h5 id="2-1、引入缓存的相关依赖"><a href="#2-1、引入缓存的相关依赖" class="headerlink" title="2.1、引入缓存的相关依赖"></a>2.1、引入缓存的相关依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--缓存的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--我们要连接数据库进行测试引入数据库驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2、数据库配置文件"><a href="#2-2、数据库配置文件" class="headerlink" title="2.2、数据库配置文件"></a>2.2、数据库配置文件</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/spring_cache?serverTimezone=UTC</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">1234567890</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">xxx.xxx.xx.xxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3、整合MyBatis操作数据库"><a href="#2-3、整合MyBatis操作数据库" class="headerlink" title="2.3、整合MyBatis操作数据库"></a>2.3、整合MyBatis操作数据库</h5><p>[详情见博客SpringBoot与数据访问(MyBatis)]j(<a href="https://blog.csdn.net/qq_43775034/article/details/104151952" target="_blank" rel="noopener">https://blog.csdn.net/qq_43775034/article/details/104151952</a>)</p><h5 id="2-4、编写实体类（bean）"><a href="#2-4、编写实体类（bean）" class="headerlink" title="2.4、编写实体类（bean）"></a>2.4、编写实体类（bean）</h5><p><strong>Employee.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer gender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//性别 1男 0女</span>    <span class="token keyword">private</span> Integer dId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String lastName<span class="token punctuation">,</span> String email<span class="token punctuation">,</span> Integer gender<span class="token punctuation">,</span> Integer dId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dId <span class="token operator">=</span> dId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastName</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>Integer gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getdId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setdId</span><span class="token punctuation">(</span>Integer dId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dId <span class="token operator">=</span> dId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Employee{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", lastName='"</span> <span class="token operator">+</span> lastName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", email='"</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", gender="</span> <span class="token operator">+</span> gender <span class="token operator">+</span>                <span class="token string">", dId="</span> <span class="token operator">+</span> dId <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Department.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonIgnoreProperties<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String departmentName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Department</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String departmentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departmentName <span class="token operator">=</span> departmentName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDepartmentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> departmentName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDepartmentName</span><span class="token punctuation">(</span>String departmentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departmentName <span class="token operator">=</span> departmentName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Department {id="</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">",departmentName="</span><span class="token operator">+</span>departmentName<span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-5、编写mapper操作数据库"><a href="#2-5、编写mapper操作数据库" class="headerlink" title="2.5、编写mapper操作数据库"></a>2.5、编写mapper操作数据库</h5><p><strong>DepartmentMapper.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Department<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Select<span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM department WHERE id=#{id}"</span><span class="token punctuation">)</span>    Department <span class="token function">getDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>EmployeeMapper.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//查询数据</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM employee WHERE id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmpById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新数据</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE employee SET lastName=#{lastName},email=#{email},gender=#{gender},d_id=#{dId} WHERE id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除数据</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM employee WHERE id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteEmpById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入数据</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO employee(lastName,email,gender,d_id) VALUES(#{lastName},#{email},#{gender},#{dId})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按名查询</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM employee WHERE lastName=#{lastName}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Employee  <span class="token function">getEmpByLastName</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：<em>@Mapper扫描mapper接口 _（扫描操作数据库所在的接口）_，在每一个mapper接口写一个@Mapper注解很麻烦，所以我们在主配置类中使用  <strong>@MapperScan(“mapper所在的包名”)</strong> 将扫描所有操作数据库的接口在每一个接口上默认加上@Mapper注解</em></p><h4 id="3、快速体验缓存"><a href="#3、快速体验缓存" class="headerlink" title="3、快速体验缓存"></a>3、快速体验缓存</h4><h5 id="3-1、开启基于注解的缓存"><a href="#3-1、开启基于注解的缓存" class="headerlink" title="3.1、开启基于注解的缓存"></a>3.1、开启基于注解的缓存</h5><p><em>我们要<strong>使用基于注解的缓存</strong>必须要在主配置类中使用 <strong>@EnableCaching注解</strong></em></p><h5 id="3-2、编写基于注解缓存的service类"><a href="#3-2、编写基于注解缓存的service类" class="headerlink" title="3.2、编写基于注解缓存的service类"></a>3.2、编写基于注解缓存的service类</h5><p><strong>EmployeeService.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>EmployeeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    EmployeeMapper employeeMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmpById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"号员工"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee emp<span class="token operator">=</span>employeeMapper<span class="token punctuation">.</span><span class="token function">getEmpById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> emp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"emp"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Employee <span class="token function">updateEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"updateEmp:"</span><span class="token operator">+</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        employeeMapper<span class="token punctuation">.</span><span class="token function">updateEmp</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> employee <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*value = "emp"*/</span><span class="token comment" spellcheck="true">/*,key = "#id",*/</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteEmp</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deleteEmp"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//@Caching  定义复杂的缓存规则</span>    <span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>            cacheable <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*value = "emp",key="#lastName"*/</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            put <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*value = "emp",key = "#result.id"*/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*value = "emp",key = "#result.email"*/</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmpByLastName</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmpByLastName</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3、-Cacheable注解"><a href="#3-3、-Cacheable注解" class="headerlink" title="3.3、@Cacheable注解"></a>3.3、<em><em>@Cacheable</em>注解</em></h5><p><em>Cacheable的几个属性详讲</em><br>1、 <em>cacheNames/value</em><br><em>指定缓存的名字，将方法的返回结果放在那个缓存中，是数组的形式，可以指定多个缓存</em><br>2、 <em>key（在缓存中是以键值对的形式存在）</em><br>缓存使用的key由于数据在缓存中是以键值对的形式存在，故key可以用它来指定，</p><p>1）、<strong>默认是使用方法参数的值</strong>， <em><em>如果方法参数是1则值为：方法的返回值</em></em><br>2）、编写SpEl   #id;参数id的值  《=======》 #a0    #p0   #root.args[0]__</p><p>3、<em>keyGenerator:</em><br>key的生成器，可以自己指定key的生成器的组件id  <em><strong>keyGenerator/key：二选一使用</strong></em><br>4、==cacheManager==<br>指定缓存管理器或者指定缓存解析器cacheResolver<br><em><strong>cacheManager/cacheResolver二选一使用</strong></em><br>5、==condition==<br>指定符合条件的情况下才缓存  <em>例：condition = “#id&gt;1”当id&gt;1时进行缓存</em><br>6、==unless==<br>否定缓存；<strong><em>当unless指定的条件为true，方法的返回值就不会被缓存</em></strong>，可以获取到结果进行判断<br> 例：unless = “#result==null”   如果结果为null时不缓存</p><p> 例：unless = “#a0==2”如果第一个参数的值是2，结果就不缓存<br>7、sync<br><em><strong>是否使用异步模式</strong></em><br>Cacheable运行流程<br>1、方法运行之前先去查询Cache组件，按照cacheNames指定的名字存取（cacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。<br>2、去Cache中查找缓存的内容，使用一个key，<strong>key默认就是方法的参数</strong> key是按照某种策略生成的；是使用keyGenerator生成的，默认使用simpleKeyGenerator生成key <strong>simpleKeyGenerator生成的key的默认策略；</strong><br> 如果没有参数；key=new SimpleKey（）；<br> 如果有一个参数；key=参数的值；<br> 如果有多个参数；key=new SimpleKey（params）<br>3、没有查到缓存就调用目标方法<br>4、将目标方法返回的结果放入缓存中<br>5、自定义KeyGenerator</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>KeyGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCacheConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"myKeyGenerator"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//id为myKeyGenerator</span>    <span class="token keyword">public</span> KeyGenerator <span class="token function">keyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">generate</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"["</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义的KeyGenerator只需在缓存注解中声明自定义KeyGenerator的id</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"emp"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>keyGenerator <span class="token operator">=</span> <span class="token string">"myKeyGenerator"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>核心</strong></em><br><strong><em>@Cacheable方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值key去查询缓存，如果没有就去运行这哥方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据</em></strong></p><h5 id="3-4、-CachePut注解"><a href="#3-4、-CachePut注解" class="headerlink" title="3.4、@CachePut注解"></a>3.4、<strong>@CachePut注解</strong></h5><p>即调用方法又同步更新了缓存数据【即修改数据库的数据时同时同步更新了缓存】（<strong>注意取缓存与放缓存的key必须是同一个值</strong>）<br><strong>运行时机：</strong><br>1、先调用目标方法<br>2、将目标方法的结果缓存起来 </p><h6 id="3-4-1、测试步骤"><a href="#3-4-1、测试步骤" class="headerlink" title="3.4.1、测试步骤"></a>3.4.1、测试步骤</h6><p>1、<strong>查询1号员工（第一次查询查询数据库并将数据放入数据库中）</strong><br>在浏览器中输入请求地址：<a href="http://localhost:8080/emp/1" target="_blank" rel="noopener">http://localhost:8080/emp/1</a><br><img src="https://img-blog.csdnimg.cn/20200219223015104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="第一次查询查询数据库并将数据存入缓存"><br>2、<strong>查询1号员工（第二次不通过数据库而是通过缓存）</strong><br>在浏览器中输入请求地址：<a href="http://localhost:8080/emp/1" target="_blank" rel="noopener">http://localhost:8080/emp/1</a><br><img src="https://img-blog.csdnimg.cn/20200219223214708.png" alt="第二次直接通过缓存得到数据"><br>3、<strong>更新1号员工【lastName=’zhangsan’, gender=0】</strong><br>在浏览器中输入请求地址：<a href="http://localhost:8080/emp?lastName=zhangsan&amp;gender=0" target="_blank" rel="noopener">http://localhost:8080/emp?lastName=zhangsan&amp;gender=0</a><br><img src="https://img-blog.csdnimg.cn/20200219224116268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="更新后的控制台打印"><br>4、<strong>查询1号员工</strong>此时查询到的数据还是<strong>汉字张三</strong>而我们重新编写的为<strong>英文zhangsan</strong><br><img src="https://img-blog.csdnimg.cn/20200219224308316.png" alt="查询数据还是张三"><br><strong>然而数据库信息已经更新</strong><em>为什么我们得到的还是原来的值？？？</em><br><img src="https://img-blog.csdnimg.cn/20200219224816804.png" alt="数据库信息已经更新"><br><img src="https://img-blog.csdnimg.cn/20200219224525432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="控制台打印更新数据"><br><em>经过分析我们得到结果：我们在存入缓存时的 _key_默认为方法的参数值<strong>在调用查询方法时查询员工时key的值为id</strong>（在此例中为Employee的id的值即为  <strong>key=#employee.id</strong>）<strong>而我们在更新缓存时默认的key为方法的返回值即为：key=employee为Employee的对象</strong>    <strong>存与更新缓存的key值不一样造成了最终取出的结果不一样</strong>，而此时的缓存也已更新，当我们再次查询缓存时调用查询方法使用的key的值为id因此查询出的结果时key的值按照id存入的缓存，故我们看到查到原来的数据</em><br><img src="https://img-blog.csdnimg.cn/20200220103455614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="缓存更新"><br><em>解决方法：</em><br><em>我们将查询与更新数据的缓存的key值设置为相同的，这样保证了我们再存缓存与取缓存时的key值相同，更新以后查处的数据也是更新以后的</em></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"emp"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认key的值为方法的参数id</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmpById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"号员工"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee emp<span class="token operator">=</span>employeeMapper<span class="token punctuation">.</span><span class="token function">getEmpById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> emp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"emp"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定方法的参数是返回值的id</span>    <span class="token keyword">public</span> Employee <span class="token function">updateEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"updateEmp:"</span><span class="token operator">+</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        employeeMapper<span class="token punctuation">.</span><span class="token function">updateEmp</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> employee <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>注意：</em>@Cacheable的key是不能用#result的，因为Cacheable是先查缓存如果缓存没有再去执行方法，然而一开始的缓存肯定是空的，因为没有调用方法所以没有返回值此时返回值为null因此#result为null会报错<br><strong>此时向浏览器发送：<a href="http://localhost:8080/emp?id=1&amp;lastName=zhangsan&amp;gender=0" target="_blank" rel="noopener">http://localhost:8080/emp?id=1&amp;lastName=zhangsan&amp;gender=0</a></strong><br><img src="https://img-blog.csdnimg.cn/20200220111750189.png" alt="更新数据">查询1号员工：<a href="http://localhost:8080/emp/1" target="_blank" rel="noopener">http://localhost:8080/emp/1</a><br><img src="https://img-blog.csdnimg.cn/20200220111903255.png" alt="查询1号员工"><br>控制打印语句也没有数据库查询语句说明去查缓存了<br><img src="https://img-blog.csdnimg.cn/20200220111949155.png" alt="控制台打印"><br>缓存更新<br><img src="https://img-blog.csdnimg.cn/20200220112127130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="缓存更新"></p><h5 id="3-5、-CacheEvict注解"><a href="#3-5、-CacheEvict注解" class="headerlink" title="3.5、@CacheEvict注解"></a>3.5、<strong>@CacheEvict注解</strong></h5><p><em><strong>几个重要的属性</strong></em><br>1、key:指定要清除的数据<br>2、 allEntries = true:指定清除这个缓存中所有的数据<br>3、beforeInvocation=false：缓存的清除是否在方法之前执行 ==<strong>默认代表缓存清除操作是在方法之后；如果出现异常缓存就不会被清除</strong>==<br>4、beforeInvocation=true代表缓存清除操作在方法执行之前，无论方法是否出现异常，缓存都清除。<br><strong>此时缓存中有数据</strong><br><img src="https://img-blog.csdnimg.cn/20200220112956151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="缓存中有数据"><br>向浏览器发送:<a href="http://localhost:8080/delemp?id=1删除1号员工" target="_blank" rel="noopener">http://localhost:8080/delemp?id=1删除1号员工</a><br><img src="https://img-blog.csdnimg.cn/20200220113125821.png" alt="删除1号员工成功"><br>此时的缓存中的数据被清空了<br><img src="https://img-blog.csdnimg.cn/20200220113217481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="缓存的数据被清空"></p><h4 id="4、整合Redis作为缓存-序列化"><a href="#4、整合Redis作为缓存-序列化" class="headerlink" title="4、整合Redis作为缓存(序列化)"></a>4、整合Redis作为缓存(序列化)</h4><p>1）、引入redis的starter，容器中保存的是 RedisCacheManager<br>2）、RedisCacheManager帮我们创建 redisCache作为缓存组件，RedisCache通过操作redis缓存数据<br>3）、默认保存数据k-v都是object；利用序列化保存，<strong>如何保存为json</strong></p><ul><li><p>1|引入了redis的starter，CacheManager变为RedisCacheManager</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2、默认创建的RedisCacheManager操作Redis的时候使用的是RedisTemplate&lt;Object,Object&gt;</p></li><li><p><em>3.RedisTemplate&lt;Object,Object&gt;是默认使用jdk的序列化机制</em><br><img src="https://img-blog.csdnimg.cn/20200220120425141.png" alt="默认使用jdk的序列化机制"></p></li></ul><p>4）、自定义CacheManager（==SpringBoot2.2.x以上版本==）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Department<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>CacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Primary<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//CacheManagerCustomizers可以来定制缓存的一些规则</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义value序列化方式</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义key序列化方式</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span><span class="token comment" spellcheck="true">//将某个缓存管理器设置为默认</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisCacheManager <span class="token function">empCacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Employee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheConfiguration config <span class="token operator">=</span>  RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheConfiguration redisCacheConfiguration1 <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheManager redisCacheManager <span class="token operator">=</span> RedisCacheManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>redisCacheConfiguration1<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  redisCacheManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisCacheManager <span class="token function">deptCacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Department<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheConfiguration config <span class="token operator">=</span>  RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheConfiguration redisCacheConfiguration1 <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheManager redisCacheManager <span class="token operator">=</span> RedisCacheManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>redisCacheConfiguration1<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  redisCacheManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>有问题希望大家能多多斧正</strong></em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> cache </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与数据访问(MyBatis)</title>
      <link href="/2020/02/04/SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE(MyBatis)/"/>
      <url>/2020/02/04/SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE(MyBatis)/</url>
      
        <content type="html"><![CDATA[<h2 id="三、整合MyBatis"><a href="#三、整合MyBatis" class="headerlink" title="三、整合MyBatis"></a>三、整合MyBatis</h2><h5 id="1-引入mybatis-starter-mybatis-spring-boot-starter-依赖"><a href="#1-引入mybatis-starter-mybatis-spring-boot-starter-依赖" class="headerlink" title="1.引入mybatis-starter(mybatis-spring-boot-starter)依赖"></a>1.引入mybatis-starter(mybatis-spring-boot-starter)依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>依赖关系图</strong><br><img src="https://img-blog.csdnimg.cn/20200203081125204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="mybatis依赖关系图"></p><h5 id="2-配置数据源的相关属性（见上篇博客整合Druid）"><a href="#2-配置数据源的相关属性（见上篇博客整合Druid）" class="headerlink" title="2.配置数据源的相关属性（见上篇博客整合Druid）"></a>2.配置数据源的相关属性（见上篇博客整合Druid）</h5><h6 id="1-引入druid数据源找到对应版本的druid依赖导入"><a href="#1-引入druid数据源找到对应版本的druid依赖导入" class="headerlink" title="1.引入druid数据源找到对应版本的druid依赖导入"></a>1.<a href="https://mvnrepository.com/artifact/com.alibaba/druid" target="_blank" rel="noopener">引入druid数据源</a>找到对应版本的druid依赖导入</h6><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入druid数据源--></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-配置文件引用上一篇博客整合Druid的配置文件"><a href="#2-配置文件引用上一篇博客整合Druid的配置文件" class="headerlink" title="2.配置文件引用上一篇博客整合Druid的配置文件"></a>2.<a href="https://blog.csdn.net/qq_43775034/article/details/104143527" target="_blank" rel="noopener">配置文件引用上一篇博客整合Druid的配置文件</a></h6><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234567890</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">initialization-mode</span><span class="token punctuation">:</span> always    <span class="token comment" spellcheck="true">#数据源的其他配置</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>slf4j    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span class="token comment" spellcheck="true">#    schema:</span><span class="token comment" spellcheck="true">#      - classpath:sql/department.sql</span><span class="token comment" spellcheck="true">#      - classpath:sql/employee.sql</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>    <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-编写配置类将数据源进行配置"><a href="#3-编写配置类将数据源进行配置" class="headerlink" title="3.编写配置类将数据源进行配置"></a>3.编写配置类将数据源进行配置</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span>StatViewServlet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span>WebStatFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span><span class="token string">"spring.datasource"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//生效的配置文件是从配置文件的spring.datasource开始</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置druid监控</span>    <span class="token comment" spellcheck="true">//1.配置管理后台的servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ServletRegistrationBean bean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认允许所有</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"deny"</span><span class="token punctuation">,</span> <span class="token string">"192.168.43.177"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.配置一个监控的filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span> <span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-给数据库建表"><a href="#3-给数据库建表" class="headerlink" title="3.给数据库建表"></a>3.给数据库建表</h5><p><strong>department.sql文件</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for department</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>department<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>department<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>departmentName<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>employee.sql文件</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for employee</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>lastName<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>d_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="1-在配置文件中说明建表sql文件的位置-启动程序自动创建数据表"><a href="#1-在配置文件中说明建表sql文件的位置-启动程序自动创建数据表" class="headerlink" title="1.在配置文件中说明建表sql文件的位置(启动程序自动创建数据表)"></a>1.在配置文件中说明建表sql文件的位置(启动程序自动创建数据表)</h6><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">schema</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>sql/department.sql  <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>sql/employee.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意，数据表在程序运行开始就会自动创建，所以运行一次以后就将此建表语句删除，防止运行一次新建一次数据表</strong><br><img src="https://img-blog.csdnimg.cn/20200203083132610.png" alt="数据库成功创建数据表"></p><h5 id="4-创建java-bean进行数据封装"><a href="#4-创建java-bean进行数据封装" class="headerlink" title="4.创建java bean进行数据封装"></a>4.创建java bean进行数据封装</h5><p><strong>Department .class</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String departmentName<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDepartmentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> departmentName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDepartmentName</span><span class="token punctuation">(</span>String departmentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departmentName <span class="token operator">=</span> departmentName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Employee.class</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer dId<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getdId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastName</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>Integer gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setdId</span><span class="token punctuation">(</span>Integer dId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dId <span class="token operator">=</span> dId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-使用MyBatis对数据库进行增删改查（MyBatis注解版）"><a href="#5-使用MyBatis对数据库进行增删改查（MyBatis注解版）" class="headerlink" title="5.使用MyBatis对数据库进行增删改查（MyBatis注解版）"></a>5.使用MyBatis对数据库进行增删改查（MyBatis注解版）</h5><h6 id="1-编写Mapper类对数据库进行增删改查"><a href="#1-编写Mapper类对数据库进行增删改查" class="headerlink" title="1.编写Mapper类对数据库进行增删改查"></a>1.编写Mapper类对数据库进行增删改查</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Department<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定这是一个操作数据库的mapper</span><span class="token annotation punctuation">@Mapper</span>           <span class="token comment" spellcheck="true">//如果不标明Mapper，MyBatis就无法工作</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//数据库查询字段</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Department <span class="token function">getDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据库删除字段</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据库信息插入</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//指定那个是自增主键，不写这句在插入数据时id会显示null</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into department(department_name) values(#{departmentName})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据库字段信息更新</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update department set department_name=#{departmentName} where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果我们的Mapper类特别多的情况下，在每一个类上都添加Mapper注解就太麻烦了，此时我们可以在主配置类上添加一下注解</strong><br>MapperScan：批量扫描所有的Mapper接口</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.atorg.springboot.mapper"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//指定添加@Mapper注解的类的位置，主动给其类上添加@Mapper注解，不用我们一个一个去添加</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="2-编写controller进行测试"><a href="#2-编写controller进行测试" class="headerlink" title="2.编写controller进行测试"></a>2.编写controller进行测试</h6><p><strong>DeptController.class</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Department<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>DepartmentMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>EmployeeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Insert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>             <span class="token comment" spellcheck="true">//注入DepartmentMapper </span>    DepartmentMapper departmentMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/{id}"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//处理映射（发送请求）{id}以占位符的形式取出id，@PathVariable路径变量</span>    <span class="token keyword">public</span> Department <span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> departmentMapper<span class="token punctuation">.</span><span class="token function">getDeptById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Department <span class="token function">insertDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">{</span>        departmentMapper<span class="token punctuation">.</span><span class="token function">insertDept</span><span class="token punctuation">(</span>department<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查询第一个人的信息：<a href="http://localhost:8080/dept/1" target="_blank" rel="noopener">http://localhost:8080/dept/1</a></strong><br><img src="https://img-blog.csdnimg.cn/20200203103759733.png" alt="查询第一个人的信息"><br><strong>插入数据<a href="http://localhost:8080/dept?departmentName=FF" target="_blank" rel="noopener">http://localhost:8080/dept?departmentName=FF</a></strong><br><img src="https://img-blog.csdnimg.cn/2020020310412148.png" alt="插入数据"><br><strong>数据库信息增加</strong><br><img src="https://img-blog.csdnimg.cn/20200203104338809.png" alt="数据库信息增加"><br><strong>问题</strong>：如果将数据库表的列名改为<strong>department_name</strong>原来为<strong>departmentName</strong>此时departmentName不能被数据库封装，此时还要开启驼峰命名法（不写配置文件的写法）写一个配置类<strong>MyBatisConfig</strong>自定义MyBatis的配置规则<br>MyBatisConfig.class作用：<strong>开启驼峰命名法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>ConfigurationCustomizer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConfigurationCustomizer <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>Configuration configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>                configuration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-使用MyBatis对数据库进行增删改查（MyBatis配置文件版）"><a href="#6-使用MyBatis对数据库进行增删改查（MyBatis配置文件版）" class="headerlink" title="6.使用MyBatis对数据库进行增删改查（MyBatis配置文件版）"></a>6.使用MyBatis对数据库进行增删改查（MyBatis配置文件版）</h5><h6 id="1-编写EmployeeMapper接口"><a href="#1-编写EmployeeMapper接口" class="headerlink" title="1.编写EmployeeMapper接口"></a>1.编写EmployeeMapper接口</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//@Mapper或者@MapperScan将接口扫描到容器中</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询员工</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmpById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入员工</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-配置全局配置文件"><a href="#2-配置全局配置文件" class="headerlink" title="2.配置全局配置文件"></a>2.配置全局配置文件</h6><p><a href="https://mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">全局配置文件参考</a><br><strong>mybatis-config.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>           //开启驼峰命名法        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">sql映射文件参考</a><br><strong>EmployeeMapper.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.springboot.mapper.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//跟EmployeeMapper接口进行绑定<span class="token comment" spellcheck="true">&lt;!-- public Employee getEmpByTd(Integer id);    public void insertEmp(Employee employee);--></span>    //配置文件形式查询数据    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atorg.springboot.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//resultType指明返回值类型        SELECT * FROM employee WHERE id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    //配置文件形式插入数据    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO employee(lastName,email,gender,d_id) VALUES (#{lastName},#{email},#{gender},#{dId})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要让MyBatis知道mybatis的全局配置文件以及sql映射文件<strong>存在并且起作用</strong>我们要在<strong>yml中指明MyBatis全局配置文件以及sql映射文件Mapper的位置</strong><br><strong>配置文件版的核心步骤</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml    <span class="token comment" spellcheck="true">#mybatis全局配置文件的位置</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml       <span class="token comment" spellcheck="true">#sql映射文件的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="3-编写Controller进行测试"><a href="#3-编写Controller进行测试" class="headerlink" title="3.编写Controller进行测试"></a>3.编写Controller进行测试</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token comment" spellcheck="true">//注入EmployeeMapper</span>EmployeeMapper employeeMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/emp/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Employee <span class="token function">getEmp</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmpById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动应用运行截图<br><img src="https://img-blog.csdnimg.cn/20200203115835808.png" alt="运行截图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> MyBatis </category>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与数据访问（JPA）</title>
      <link href="/2020/02/04/SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%EF%BC%88JPA%EF%BC%89/"/>
      <url>/2020/02/04/SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%EF%BC%88JPA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="四、整合SpringData-JPA操作数据库"><a href="#四、整合SpringData-JPA操作数据库" class="headerlink" title="四、整合SpringData JPA操作数据库"></a>四、整合SpringData JPA操作数据库</h2><h6 id="1-引入JPA依赖"><a href="#1-引入JPA依赖" class="headerlink" title="1.引入JPA依赖"></a>1.引入JPA依赖</h6><p>JPA：ORM(Object Relational Mapping)</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>依赖关系图</strong><br><img src="https://img-blog.csdnimg.cn/20200203121303179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="JPA依赖关系图"><br><strong>配置数据源</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">spring</span><span class="token punctuation">:</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/jpa        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234567890</span>        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；"><a href="#2-编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；" class="headerlink" title="2.编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；"></a>2.编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonIgnoreProperties<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置映射关系，使用jpa注解</span><span class="token comment" spellcheck="true">//@JsonIgnoreProperties(value = {"hibernateLazyInitializer"})</span><span class="token annotation punctuation">@Entity</span>     <span class="token comment" spellcheck="true">//告诉JPA这是一个实体类（和数据表映射的类）</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"tb1_user"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//使用@Table来指定和那个数据表对应;如果省略默认表名就是user</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>            <span class="token comment" spellcheck="true">///这是一个主键</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//表示主键自增</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这是和数据表队对应的一个列</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>             <span class="token comment" spellcheck="true">//省略默认列名就是属性名</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastName</span><span class="token punctuation">(</span>String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@Entity:告诉JPA这是一个实体类,和数据表映射类;<br>**@Table(name=”tb1_user”)  :使用@Table来指定和那个数据表对应;如果省略默认表名就是类名小写即对应此表为user；</strong><br><strong>@Id：这是一个主键</strong><br><strong>@GeneratedValue(strategy = GenerationType.IDENTITY) ：表示主键自增；@Column(name = “last_name”,length = 50):表示这是和数据表队对应的一个列,可以自定义列名和长度，如果省略默认列名就是属性名</strong></p><h6 id="3-编写一个Dao接口来操作实体类对应的数据表（Repository）"><a href="#3-编写一个Dao接口来操作实体类对应的数据表（Repository）" class="headerlink" title="3.编写一个Dao接口来操作实体类对应的数据表（Repository）"></a>3.编写一个Dao接口来操作实体类对应的数据表（Repository）</h6><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>repository<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//继承JpaRepository来完成对数据库的操作</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此外还得对jpa进行基本的配置</strong>参考<strong>JpaRepository</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">jpa</span><span class="token punctuation">:</span>     <span class="token key atrule">hibernate</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#      更新或者创建数据表结构(如果没有实体类中的数据表时将自动创建，如果存在将自动更新数据)</span>       <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update<span class="token comment" spellcheck="true">#      控制台显示sql</span>       <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>jpa.hibernate.ddl-auto: update  //更新或者创建数据表结构(如果没有实体类中的数据表时将自动创建，如果存在将自动更新数据)</strong><br>可以有下图看到默认的数据池是<strong>HikariPool</strong><br><img src="https://img-blog.csdnimg.cn/20200203172839832.png" alt="成功创建数据表"><br>数据库成功创建数据表<br><img src="https://img-blog.csdnimg.cn/20200203172925207.png" alt="数据库成功添加数据表"></p><h6 id="4-编写Controller进行测试"><a href="#4-编写Controller进行测试" class="headerlink" title="4.编写Controller进行测试"></a>4.编写Controller进行测试</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>UserRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserRepository userRepository<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询数据</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//插入数据</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">insertUser</span><span class="token punctuation">(</span>User user <span class="token punctuation">)</span><span class="token punctuation">{</span>        User save<span class="token operator">=</span>userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> save<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>findById(id)，save()</strong> 这两个方法是UserRepository 因为<strong>继承JpaRepository在JpaRepository封装了操作数据库的所有方法</strong><br><strong>发送查询请求</strong><br><img src="https://img-blog.csdnimg.cn/20200203173651893.png" alt="在这里插入图片描述"><br><strong>控制台生成sql语句</strong><br><img src="https://img-blog.csdnimg.cn/20200203173618122.png" alt="在控制台生成的sql语句"><br><strong>发送插入数据请求</strong><br><img src="https://img-blog.csdnimg.cn/20200203173923542.png" alt="插入数据"><br><strong>控制台生成的sql语句</strong><br><img src="https://img-blog.csdnimg.cn/20200203174000360.png" alt="控制台生成的sql语句"><br><strong>数据库数据表的信息增加</strong><br><img src="https://img-blog.csdnimg.cn/20200203174054318.png" alt="数据库数据表的信息增加"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> SpringData JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> MySql </tag>
            
            <tag> SpringData JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与数据访问（JDBC）</title>
      <link href="/2020/02/04/SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%EF%BC%88JDBC%EF%BC%89/"/>
      <url>/2020/02/04/SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%EF%BC%88JDBC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、整合最基本的JDBC"><a href="#一、整合最基本的JDBC" class="headerlink" title="一、整合最基本的JDBC"></a>一、整合最基本的JDBC</h2><h5 id="1-引入最基本的jdbc和MySQL驱动依赖"><a href="#1-引入最基本的jdbc和MySQL驱动依赖" class="headerlink" title="1.引入最基本的jdbc和MySQL驱动依赖"></a>1.引入最基本的jdbc和MySQL驱动依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                         //jdbc依赖        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                         //引入MySQL驱动        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;scope>runtime&lt;/scope>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-访问数据库时必不可少的配置（在此采用yml文件）"><a href="#2-访问数据库时必不可少的配置（在此采用yml文件）" class="headerlink" title="2.访问数据库时必不可少的配置（在此采用yml文件）"></a>2.访问数据库时必不可少的配置（在此采用yml文件）</h5><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234567890</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/jdbc<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver            <span class="token key atrule">initialization-mode</span><span class="token punctuation">:</span> always            <span class="token comment" spellcheck="true">#初始化模式其中有三个值，always为始终执行初始化，embedded只初始化内存数据库（默认值）,如h2等，never为不执行初始化。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="1-SpringBoot2-0及以上必须加上初始化模式"><a href="#1-SpringBoot2-0及以上必须加上初始化模式" class="headerlink" title="1.SpringBoot2.0及以上必须加上初始化模式"></a>1.<strong>SpringBoot2.0及以上必须加上初始化模式</strong></h6><p>==1）、驱动类使用com.mysql.jdbc.Driver时必须将依赖文件中的mysql-connector-java版本升至5.x以上<br>==2）、<strong>com.mysql.jdbc.Driver 是 mysql-connector-java 5中的，com.mysql.cj.jdbc.Driver 是 mysql-connector-java 6中的</strong>==</p><h6 id="2-SpringBoot2-0以上默认的数据源是-class-com-zaxxer-hikari-Hikar-iDataSource"><a href="#2-SpringBoot2-0以上默认的数据源是-class-com-zaxxer-hikari-Hikar-iDataSource" class="headerlink" title="2.SpringBoot2.0以上默认的数据源是:class com.zaxxer.hikari.Hikar.iDataSource"></a>2.SpringBoot2.0以上默认的数据源是:<strong>class com.zaxxer.hikari.Hikar.iDataSource</strong></h6><h5 id="3-数据源的相关配置都在DataSourceProperties类里面"><a href="#3-数据源的相关配置都在DataSourceProperties类里面" class="headerlink" title="3.数据源的相关配置都在DataSourceProperties类里面"></a>3.数据源的相关配置都在DataSourceProperties类里面</h5><p>自动配置原理都在：<em>org.springframework.boot.autoconfigure.jdbc</em></p><h6 id="1-参考DataSourceConfiguration根据配置创建数据源，默认使用hikari连接池；可以使用spring-datasource-type指定自定义的数据源类型"><a href="#1-参考DataSourceConfiguration根据配置创建数据源，默认使用hikari连接池；可以使用spring-datasource-type指定自定义的数据源类型" class="headerlink" title="1).参考DataSourceConfiguration根据配置创建数据源，默认使用hikari连接池；可以使用spring.datasource.type指定自定义的数据源类型"></a>1).参考DataSourceConfiguration根据配置创建数据源，默认使用hikari连接池；可以使用spring.datasource.type指定自定义的数据源类型</h6><h6 id="2-SpringBoot默认支持"><a href="#2-SpringBoot默认支持" class="headerlink" title="2).SpringBoot默认支持"></a>2).SpringBoot默认支持</h6><pre class="line-numbers language-java"><code class="language-java">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSourceorg<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbcp2<span class="token punctuation">.</span>BasicDataSourceorg<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="3-自定义数据源类型"><a href="#3-自定义数据源类型" class="headerlink" title="3).自定义数据源类型"></a>3).自定义数据源类型</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>        proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"spring.datasource.type"</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span> <span class="token punctuation">{</span>        <span class="token function">Generic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>DataSourceProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用DataSourceBuilder创建数据源，利用反射创建相应type的数据源，并且绑定相关的属性</span>            <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-DataSourceInitializer是ApplicationListener类型的监听器"><a href="#4-DataSourceInitializer是ApplicationListener类型的监听器" class="headerlink" title="4).DataSourceInitializer是ApplicationListener类型的监听器"></a>4).DataSourceInitializer是ApplicationListener类型的监听器</h6><p>spring.datasource下有两个属性  schme、data，其中<strong>schema为表初始化语句（建表）</strong>，<strong>data为数据初始化（数据）</strong>，默认加载schema.sql与data.sql。脚本位置可以通过spring.datasource.schema  与spring.datasource.data 来改变，源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">createSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Resource<span class="token operator">></span> scripts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getScripts</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.schema"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"schema"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scripts<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Initialization disabled (not running DDL scripts)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String username <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getSchemaUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getSchemaPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runScripts</span><span class="token punctuation">(</span>scripts<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">!</span>scripts<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">initSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Resource<span class="token operator">></span> scripts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getScripts</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.data"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scripts<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Initialization disabled (not running data scripts)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String username <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getDataUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getDataPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runScripts</span><span class="token punctuation">(</span>scripts<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>作用：</strong><br><strong>1）、createSchema，initSchema 创建，初始化并且运行建表语句</strong>对应2.0以下版本的<strong>runSchemaScripts</strong><br><strong>2）、getScripts 运行插入数据的语句</strong>   对应2.0以下版本的<strong>runDataScripts</strong><br>默认只需将文件命名为：</p><pre class="line-numbers language-xml"><code class="language-xml">schema-*.sql、data-*.sql默认规则：schema.sql,schema-all.sql;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如果运行自定义sql文件则指定sql文件的位置</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">initialization-mode</span><span class="token punctuation">:</span> always<span class="token key atrule">schema</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>department.sql           <span class="token comment" spellcheck="true">#指定sql文件的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>initialization-mode: always需要生命脚本总是启动（在配置文件中加上这个配置信息,<strong>如果不加sql文件不会执行会使页面出现404错误</strong>）</p><h6 id="5-操作数据库：自动配置了JdbcTemplate操作数据库；"><a href="#5-操作数据库：自动配置了JdbcTemplate操作数据库；" class="headerlink" title="5).操作数据库：自动配置了JdbcTemplate操作数据库；"></a>5).操作数据库：自动配置了JdbcTemplate操作数据库；</h6><p>编写一个Controller测试JdbcTemplate</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atorg<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token comment" spellcheck="true">//注入jdbctemplate</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>          <span class="token comment" spellcheck="true">//把数据写到web页面</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//发送query请求</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * FROM department"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//查询第一条数据</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意运行一次程序就会新建一次sql数据表，运行完就将sql文件删除即可</strong><br><img src="https://img-blog.csdnimg.cn/20200202152938993.png" alt="运行创建数据库jdbc"><br>运行截图<br><img src="https://img-blog.csdnimg.cn/2020020215284054.png" alt="运行截图"></p><h2 id="二、整合数据源Druid"><a href="#二、整合数据源Druid" class="headerlink" title="二、整合数据源Druid"></a>二、整合数据源Druid</h2><h6 id="1）、配置信息"><a href="#1）、配置信息" class="headerlink" title="1）、配置信息"></a>1）、配置信息</h6><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234567890</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/jdbc<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">initialization-mode</span><span class="token punctuation">:</span> always    <span class="token comment" spellcheck="true">##################################################################</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>slf4j    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500      <span class="token comment" spellcheck="true">#      schema:</span>      <span class="token comment" spellcheck="true">#        - classpath:department.sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>#######以下的属性并不能绑定到数据库的配置里面，启动程序以后这些配置使不起作用的，如果要想这些配置信息起作用必须写一个配置类将这些配置信息的路径写明</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//导入druid数据源</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span><span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//表明配置文件起作用的是从spring.datasource开始的所有都起作用</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> DataSource <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2）、配置druid监控"><a href="#2）、配置druid监控" class="headerlink" title="2）、配置druid监控"></a>2）、配置druid监控</h6><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//配置druid监控</span>        <span class="token comment" spellcheck="true">//1.配置管理后台的servlet</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ServletRegistrationBean bean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置druid登陆名</span>            initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置druid登陆密码</span>            initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认允许所有</span>            initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"deny"</span><span class="token punctuation">,</span> <span class="token string">"192.168.43.177"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拒绝此用户访问</span>            bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置初始化参数</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.配置一个监控的filter</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span> <span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拦截的所有请求中排除*.js,*.css,/druid/*请求</span>            bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化参数</span>            bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拦截所有请求</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200202161515673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="http://localhost:8080/druid/"><br><strong>登录名为:admin  登陆密码：123456</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> JDBC </category>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> DruidDataSource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础（中-1）</title>
      <link href="/2019/12/28/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD-1%EF%BC%89/"/>
      <url>/2019/12/28/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD-1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库基本操作"><a href="#MySQL数据库基本操作" class="headerlink" title="MySQL数据库基本操作"></a>MySQL数据库基本操作</h1><h4 id="2-使用聚合函数查询"><a href="#2-使用聚合函数查询" class="headerlink" title="2 使用聚合函数查询"></a>2 使用聚合函数查询</h4><h5 id="2-4-COUNT-函数（实例）COUNT-函数用来统计记录的条数；与-GOUPE-BY-关键字一起使用"><a href="#2-4-COUNT-函数（实例）COUNT-函数用来统计记录的条数；与-GOUPE-BY-关键字一起使用" class="headerlink" title="2.4 COUNT()函数（实例）COUNT()函数用来统计记录的条数；与 GOUPE BY 关键字一起使用"></a>2.4 COUNT()函数（实例）<strong>COUNT()函数用来统计记录的条数；与 GOUPE BY 关键字一起使用</strong></h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用来统计记录的条数</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total <span class="token keyword">FROM</span> t_grade<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换字段标志</span><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stuName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与GROUP　BY关键字一起使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-5-SUN-函数（实例）SUM-函数是求和函数；与-GOUPE-BY-关键字一起使用"><a href="#2-5-SUN-函数（实例）SUM-函数是求和函数；与-GOUPE-BY-关键字一起使用" class="headerlink" title="2.5 SUN()函数（实例）SUM()函数是求和函数；与 GOUPE BY 关键字一起使用"></a>2.5 SUN()函数（实例）<strong>SUM()函数是求和函数；与 GOUPE BY 关键字一起使用</strong></h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">WHERE</span> stuName<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求和函数</span><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stuName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与GROUP　BY关键字一起使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-6-AVG-函数（实例）AVG-函数是求平均值的函数；与-GOUPE-BY-关键字一起使用"><a href="#2-6-AVG-函数（实例）AVG-函数是求平均值的函数；与-GOUPE-BY-关键字一起使用" class="headerlink" title="2.6 AVG()函数（实例）AVG()函数是求平均值的函数；与 GOUPE BY 关键字一起使用"></a>2.6 AVG()函数（实例）<strong>AVG()函数是求平均值的函数；与 GOUPE BY 关键字一起使用</strong></h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">WHERE</span> stuName<span class="token operator">=</span>'<span class="token comment" spellcheck="true">###';//求平均值的函数</span><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stuName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与GROUP　BY关键字一起使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-7-MAX-函数（实例）MAX-函数是求最大值的函数；与-GOUPE-BY-关键字一起使用"><a href="#2-7-MAX-函数（实例）MAX-函数是求最大值的函数；与-GOUPE-BY-关键字一起使用" class="headerlink" title="2.7 MAX()函数（实例）MAX()函数是求最大值的函数；与 GOUPE BY 关键字一起使用"></a>2.7 MAX()函数（实例）<strong>MAX()函数是求最大值的函数；与 GOUPE BY 关键字一起使用</strong></h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span>course<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">WHERE</span> stuName<span class="token operator">=</span>'<span class="token comment" spellcheck="true">####';//求最大值的函数</span><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stuName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与GROUP　BY关键字一起使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-8-MIN-函数（实例）MIN-函数是求最小值的函数；与-GOUPE-BY-关键字一起使用"><a href="#2-8-MIN-函数（实例）MIN-函数是求最小值的函数；与-GOUPE-BY-关键字一起使用" class="headerlink" title="2.8 MIN()函数（实例）MIN()函数是求最小值的函数；与 GOUPE BY 关键字一起使用"></a>2.8 MIN()函数（实例）<strong>MIN()函数是求最小值的函数；与 GOUPE BY 关键字一起使用</strong></h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span>course<span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">WHERE</span> stuName<span class="token operator">=</span>'<span class="token comment" spellcheck="true">####';//求最小值的函数</span><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_grade <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stuName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与GROUP　BY关键字一起使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-连接查询"><a href="#3-连接查询" class="headerlink" title="3 连接查询"></a>3 连接查询</h4><h5 id="3-1-内连接查询-实例"><a href="#3-1-内连接查询-实例" class="headerlink" title="3.1 内连接查询(实例)"></a>3.1 内连接查询(实例)</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">,</span>t_bookType<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">,</span>t_bookType <span class="token keyword">WHERE</span> t_book<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>t_bookType<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> bookName<span class="token punctuation">,</span>author<span class="token punctuation">,</span>bookTypeName <span class="token keyword">FROM</span> t_book<span class="token punctuation">,</span>t_bookType <span class="token keyword">WHERE</span> t_book<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>t_bookType<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内连接查询，内连接查询可以查询两个或者两个以上的表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-2-外连接查询（左连接）"><a href="#3-2-外连接查询（左连接）" class="headerlink" title="3.2 外连接查询（左连接）"></a>3.2 外连接查询（左连接）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span><span class="token punctuation">,</span>tb<span class="token punctuation">.</span><span class="token punctuation">`</span>author<span class="token punctuation">`</span><span class="token punctuation">,</span>tby<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeName<span class="token punctuation">`</span> <span class="token keyword">FROM</span> t_book tb<span class="token punctuation">,</span>t_bookType tby <span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>tby<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用别名，推荐使用</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_bookType <span class="token keyword">ON</span> t_book<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>t_bookType<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外连接查询，可以查出一张表的所有信息（左连接查询）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-2-外连接查询（右连接）"><a href="#3-2-外连接查询（右连接）" class="headerlink" title="3.2 外连接查询（右连接）"></a>3.2 外连接查询（右连接）</h5><pre class="line-numbers language-sql"><code class="language-sql">    <span class="token keyword">SELECT</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span><span class="token punctuation">,</span>tb<span class="token punctuation">.</span><span class="token punctuation">`</span>author<span class="token punctuation">`</span><span class="token punctuation">,</span>tby<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeName<span class="token punctuation">`</span> <span class="token keyword">FROM</span> t_book tb <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_bookType tby <span class="token keyword">ON</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>tby<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用别名，推荐使用</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_bookType <span class="token keyword">ON</span> t_book<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>t_bookType<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>（右连接查询）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-3-多条件查询（实例）"><a href="#3-3-多条件查询（实例）" class="headerlink" title="3.3 多条件查询（实例）"></a>3.3 多条件查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span><span class="token punctuation">,</span>tb<span class="token punctuation">.</span><span class="token punctuation">`</span>author<span class="token punctuation">`</span><span class="token punctuation">,</span>tby<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeName<span class="token punctuation">`</span> <span class="token keyword">FROM</span> t_book tb<span class="token punctuation">,</span>t_bookType tby <span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookTypeId<span class="token punctuation">`</span><span class="token operator">=</span>tby<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">AND</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>price<span class="token punctuation">`</span><span class="token operator">></span><span class="token number">70</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-子查询（实例）"><a href="#4-子查询（实例）" class="headerlink" title="4 子查询（实例）"></a>4 子查询（实例）</h4><h5 id="4-1-带IN关键字的子查询"><a href="#4-1-带IN关键字的子查询" class="headerlink" title="4.1 带IN关键字的子查询"></a>4.1 带IN关键字的子查询</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_bookType<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> bookTypeId <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_bookType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个查询语句的条件可能落在另一个SELECT语句的查询结果中</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> bookTypeId <span class="token operator">NOT</span> <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_bookType<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4-2-带比较运算符的子查询"><a href="#4-2-带比较运算符的子查询" class="headerlink" title="4.2 带比较运算符的子查询"></a>4.2 带比较运算符的子查询</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> price <span class="token keyword">FROM</span> t_pricelevel <span class="token keyword">WHERE</span> priceLevel<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> price<span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> price <span class="token keyword">FROM</span> t_pricelevel <span class="token keyword">WHERE</span> priceLevel<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子查询可以使用比较运算符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4-3带Exists关键字的子查询"><a href="#4-3带Exists关键字的子查询" class="headerlink" title="4.3带Exists关键字的子查询"></a>4.3带Exists关键字的子查询</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_bookType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//假如子查询查询到记录，则进行外部查询，否则，不执行外层查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_bookType<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-4-带Any和All关键字的子查询"><a href="#4-4-带Any和All关键字的子查询" class="headerlink" title="4.4 带Any和All关键字的子查询"></a>4.4 带Any和All关键字的子查询</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> price<span class="token operator">>=</span><span class="token keyword">ANY</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> price <span class="token keyword">FROM</span> t_pricelevel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ANY关键字表示满足其中任何一个条件</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> price<span class="token operator">>=</span><span class="token keyword">ALL</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> price <span class="token keyword">FROM</span> t_pricelevel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ALL关键字表示满足其中所有的条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-合并查询结果UNION和UNION-ALL"><a href="#5-合并查询结果UNION和UNION-ALL" class="headerlink" title="5 合并查询结果UNION和UNION ALL"></a>5 合并查询结果UNION和UNION ALL</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_book <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_bookType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//UNION数据库系统会将所有的查询结果合并在一起，然后去掉相同的记录</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_book <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_bookType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用UNION　ALL 不会去掉系统相同的记录，会将所有的记录全部查询出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-为表和字段取别名（实例）"><a href="#6-为表和字段取别名（实例）" class="headerlink" title="6 为表和字段取别名（实例）"></a>6 为表和字段取别名（实例）</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book tb <span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span> <span class="token keyword">FROM</span> t_book tb <span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给表取别名</span><span class="token keyword">SELECT</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span> bName <span class="token keyword">FROM</span> t_book tb <span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span> <span class="token keyword">AS</span> bName <span class="token keyword">FROM</span> t_book tb <span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给字段取别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-插入数据（实例）"><a href="#7-插入数据（实例）" class="headerlink" title="7 插入数据（实例）"></a>7 插入数据（实例）</h4><h5 id="7-1-给表的所有字段插入数据"><a href="#7-1-给表的所有字段插入数据" class="headerlink" title="7.1 给表的所有字段插入数据"></a>7.1 给表的所有字段插入数据</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>'<span class="token comment" spellcheck="true">#####',20,'#####',1);//给表所有的字段插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book<span class="token punctuation">(</span>id<span class="token punctuation">,</span>bookName<span class="token punctuation">,</span>price<span class="token punctuation">,</span>author<span class="token punctuation">,</span>bookTypeId<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>'<span class="token comment" spellcheck="true">####',20,'####',1);</span><span class="token comment" spellcheck="true">#####  7.2给表的指定字段插入数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book<span class="token punctuation">(</span>bookName<span class="token punctuation">,</span>author<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>'<span class="token comment" spellcheck="true">####','##');//给表指定的字段插入数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7-3同时插入多条记录"><a href="#7-3同时插入多条记录" class="headerlink" title="7.3同时插入多条记录"></a>7.3同时插入多条记录</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book<span class="token punctuation">(</span>id<span class="token punctuation">,</span>bookName<span class="token punctuation">,</span>price<span class="token punctuation">,</span>author<span class="token punctuation">,</span>bookTypeId<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>'<span class="token comment" spellcheck="true">#####',20,'##',1),(NULL,'####',20,'###,1);//同时插入多条记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7-4-更新数据"><a href="#7-4-更新数据" class="headerlink" title="7.4 更新数据"></a>7.4 更新数据</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> t_book <span class="token keyword">SET</span> bookName<span class="token operator">=</span><span class="token string">'Java编程思想'</span><span class="token punctuation">,</span>price<span class="token operator">=</span><span class="token number">120</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7-5-删除数据"><a href="#7-5-删除数据" class="headerlink" title="7.5 删除数据"></a>7.5 删除数据</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> bookName<span class="token operator">=</span><span class="token string">'我'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="8-索引的引入"><a href="#8-索引的引入" class="headerlink" title="8. 索引的引入"></a>8. 索引的引入</h4><p><strong>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。</strong><br>优点：<strong>在信息检索过程中，若使用分组及排序子句进行时，通过建立索引能有效的减少检索过程中所需的分组及排序时间，提高检索效率。</strong><br>缺点：<strong>在数据库建立过程中，需花费较多的时间去建立并维护索引，特别是随着数据总量的增加，所花费的时间将不断递增。</strong></p><h5 id="8-1-索引分类"><a href="#8-1-索引分类" class="headerlink" title="8.1 索引分类"></a>8.1 索引分类</h5><h6 id="1）主键索引（PRIMAY-KEY）"><a href="#1）主键索引（PRIMAY-KEY）" class="headerlink" title="1）主键索引（PRIMAY KEY）"></a>1）主键索引（PRIMAY KEY）</h6><p><strong>数据库表经常有一列或多列组合，其值唯一标识表中的每一行。该列称为表的主键。在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。</strong></p><h6 id="2）唯一索引（UNIQUE）"><a href="#2）唯一索引（UNIQUE）" class="headerlink" title="2）唯一索引（UNIQUE）"></a>2）唯一索引（UNIQUE）</h6><p><strong>唯一索引是不允许其中任何两行具有相同索引值的索引。当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将在表中创建重复键值的新数据。例如，如果在employee表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。</strong></p><h6 id="3）常规索引（INDEX）"><a href="#3）常规索引（INDEX）" class="headerlink" title="3）常规索引（INDEX）"></a>3）常规索引（INDEX）</h6><p><strong>可以建立在任何数据类型中</strong></p><h6 id="4）全文索引（FULLTEXT）"><a href="#4）全文索引（FULLTEXT）" class="headerlink" title="4）全文索引（FULLTEXT）"></a>4）全文索引（FULLTEXT）</h6><p><strong>主要作用就是提高查询较大字符串类型的速度；只有 MyISAM 引擎支持该索引，Mysql 默认引擎不支持；</strong></p><h5 id="8-2创建索引（实例）"><a href="#8-2创建索引（实例）" class="headerlink" title="8.2创建索引（实例）"></a>8.2创建索引（实例）</h5><h6 id="在创建表时创建索引"><a href="#在创建表时创建索引" class="headerlink" title="在创建表时创建索引"></a>在创建表时创建索引</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_user2<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span>        userName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        PASSWORD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token punctuation">(</span>userName<span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建表时创建索，创建单列索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_user3<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span>        userName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        PASSWORD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">INDEX</span> index_userName_password <span class="token punctuation">(</span>userName<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建表时创建索，创建多列索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="在已创建的表上创建索引"><a href="#在已创建的表上创建索引" class="headerlink" title="在已创建的表上创建索引"></a>在已创建的表上创建索引</h6><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_userName <span class="token keyword">ON</span> t_user4<span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在已经存在的表上创建单列索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_userName_password <span class="token keyword">ON</span> t_user4<span class="token punctuation">(</span>userName<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在已经存在的表上创建多列索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="用alter-table-语句创建索引"><a href="#用alter-table-语句创建索引" class="headerlink" title="用alter table 语句创建索引"></a>用alter table 语句创建索引</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_user5 <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> index_userName<span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单列索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_user5 <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_userName_password<span class="token punctuation">(</span>userName<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>用<span class="token keyword">alter</span> <span class="token keyword">table</span>语句来创建多列索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="8-3删除索引（实例）"><a href="#8-3删除索引（实例）" class="headerlink" title="8.3删除索引（实例）"></a>8.3删除索引（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_userName_password <span class="token keyword">ON</span> t_user5<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础（上）</title>
      <link href="/2019/12/28/MySQL%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2019/12/28/MySQL%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL基础操作"><a href="#MySQL基础操作" class="headerlink" title="MySQL基础操作"></a>MySQL基础操作</h1><h5 id="1-1创建数据库"><a href="#1-1创建数据库" class="headerlink" title="1.1创建数据库"></a>1.1创建数据库</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2显示数据库"><a href="#1-2显示数据库" class="headerlink" title="1.2显示数据库"></a>1.2显示数据库</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">Show</span> <span class="token keyword">databases</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-3删除数据库"><a href="#1-3删除数据库" class="headerlink" title="1.3删除数据库"></a>1.3删除数据库</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">Drop</span> <span class="token keyword">database</span> 数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>创建表的约束条件</strong></p><table><thead><tr><th>约束条件</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARYKEY</td><td>标识该属性为该表的主键，可以唯一的标识对应的记录</td></tr><tr><td>FOREIGN KEY</td><td>标识该属性为该表的外键，与某表的主键关联</td></tr><tr><td>NOT NULL</td><td>标识该属性不能为空</td></tr><tr><td>UNIQUE</td><td>标识该属性的值是唯一的</td></tr><tr><td>AUTO_INCREMENT</td><td>标识该属性的值自动增加</td></tr><tr><td>DEFAULT</td><td>为该属性设置默认值</td></tr></tbody></table><h5 id="1-4创建表（实例）"><a href="#1-4创建表（实例）" class="headerlink" title="1.4创建表（实例）"></a>1.4创建表（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_bookType<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    bookTypeName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    bookTypeDesc <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-5查看表结构（实例）"><a href="#1-5查看表结构（实例）" class="headerlink" title="1.5查看表结构（实例）"></a>1.5查看表结构（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">desc</span> t_bookType<span class="token punctuation">;</span><span class="token keyword">show</span>  <span class="token keyword">create</span> <span class="token keyword">table</span> t_bookType；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-6修改表（实例）"><a href="#1-6修改表（实例）" class="headerlink" title="1.6修改表（实例）"></a>1.6修改表（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_book <span class="token keyword">rename</span> t_book2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改表名</span><span class="token keyword">alter</span> <span class="token keyword">table</span> t_book change bookName bookName2 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改字段</span><span class="token keyword">alter</span> <span class="token keyword">table</span> t_book <span class="token keyword">add</span> testField <span class="token keyword">int</span> <span class="token keyword">first</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在第一个位置插入一行头为testField</span><span class="token keyword">alter</span> <span class="token keyword">table</span> t_book <span class="token keyword">add</span> test <span class="token keyword">int</span> <span class="token keyword">after</span> author<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在author之后插入一行头为test</span><span class="token keyword">alter</span> <span class="token keyword">table</span> t_book <span class="token keyword">drop</span> testField<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除一行testField</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-7删除表（实例）"><a href="#1-7删除表（实例）" class="headerlink" title="1.7删除表（实例）"></a>1.7删除表（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> t_bookType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除一个表，只能先删除子表再删除父表</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-8查询所有字段（实例）"><a href="#1-8查询所有字段（实例）" class="headerlink" title="1.8查询所有字段（实例）"></a>1.8查询所有字段（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>stuName<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>gradeName <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询字段的两种方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-9查询指定字段（实例）"><a href="#1-9查询指定字段（实例）" class="headerlink" title="1.9查询指定字段（实例）"></a>1.9查询指定字段（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> stuName<span class="token punctuation">,</span>gradeName <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询指定的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-10where条件查询（实例）"><a href="#1-10where条件查询（实例）" class="headerlink" title="1.10where条件查询（实例）"></a>1.10where条件查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> age<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//条件表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-11带IN关键字查询（实例）"><a href="#1-11带IN关键字查询（实例）" class="headerlink" title="1.11带IN关键字查询（实例）"></a>1.11带IN关键字查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> age <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IN的使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-12带-BETWEENAND-的范围查询（实例）"><a href="#1-12带-BETWEENAND-的范围查询（实例）" class="headerlink" title="1.12带 BETWEENAND 的范围查询（实例）"></a>1.12带 BETWEENAND 的范围查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">21</span> <span class="token operator">AND</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> age <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token number">21</span> <span class="token operator">AND</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-13带-LIKE-的模糊查询（实例）"><a href="#1-13带-LIKE-的模糊查询（实例）" class="headerlink" title="1.13带 LIKE 的模糊查询（实例）"></a>1.13带 LIKE 的模糊查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> stuName <span class="token operator">LIKE</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询特定信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> stuName <span class="token operator">LIKE</span> <span class="token string">'张三%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询信息中最前面带有此字段的</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> stuName <span class="token operator">LIKE</span> <span class="token string">'张三__'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询四个字中最前面有特定字符的</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> stuName <span class="token operator">LIKE</span> <span class="token string">'%张三%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模糊查询（查询所有带特定字符的字段）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-14-空值查询（实例）"><a href="#1-14-空值查询（实例）" class="headerlink" title="1.14 空值查询（实例）"></a>1.14 空值查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> sex <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> sex <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询字段为空或不空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-15-带-AND或OR-的多条件查询（实例）"><a href="#1-15-带-AND或OR-的多条件查询（实例）" class="headerlink" title="1.15 带 AND或OR 的多条件查询（实例）"></a>1.15 带 AND或OR 的多条件查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> gradeName<span class="token operator">=</span><span class="token string">'一年级'</span> <span class="token operator">AND</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">WHERE</span> gradeName<span class="token operator">=</span><span class="token string">'一年级'</span> <span class="token operator">OR</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多条件查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-16DISTINCT-去重复查询（实例）"><a href="#1-16DISTINCT-去重复查询（实例）" class="headerlink" title="1.16DISTINCT 去重复查询（实例）"></a>1.16DISTINCT 去重复查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql">   <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> gradeName <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去重复查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-1-对查询结果排序（实例）"><a href="#2-1-对查询结果排序（实例）" class="headerlink" title="2.1 对查询结果排序（实例）"></a>2.1 对查询结果排序（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">ASC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//升序排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//降序排序（给查询信息排序）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-2-GROUP-BY-分组查询（实例）"><a href="#2-2-GROUP-BY-分组查询（实例）" class="headerlink" title="2.2 GROUP BY 分组查询（实例）"></a>2.2 GROUP BY 分组查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gradeName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单独使用毫无意义</span><span class="token keyword">SELECT</span> gradeName<span class="token punctuation">,</span> GROUP_CONCAT<span class="token punctuation">(</span>stuName<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gradeName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与GROUP_CONCAT函数一起使用</span><span class="token keyword">SELECT</span> gradeName<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gradeName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与聚合函数一起使用 </span><span class="token keyword">SELECT</span> gradeName<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gradeName <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与HAVING一起使用（限制输出的结果）</span><span class="token keyword">SELECT</span> gradeName<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gradeName <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后加一个人总行）</span><span class="token keyword">SELECT</span> gradeName<span class="token punctuation">,</span> GROUP_CONCAT<span class="token punctuation">(</span>stuName<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gradeName <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-LIMIT-分页查询（实例）"><a href="#2-3-LIMIT-分页查询（实例）" class="headerlink" title="2.3 LIMIT 分页查询（实例）"></a>2.3 LIMIT 分页查询（实例）</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LIMIT分页查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css中margin元素塌陷问题</title>
      <link href="/2019/12/13/css%E4%B8%ADmargin%E5%85%83%E7%B4%A0%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/13/css%E4%B8%ADmargin%E5%85%83%E7%B4%A0%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="css中margin元素塌陷"><a href="#css中margin元素塌陷" class="headerlink" title="css中margin元素塌陷"></a>css中margin元素塌陷</h1><p> <em>继承结构的元素，水平与垂直结构上的margin取其最大值</em></p><pre class="line-numbers language-css"><code class="language-css">    &lt;div class=<span class="token string">"box"</span>>        &lt;div class=<span class="token string">"dad"</span>>            &lt;div class=<span class="token string">"son"</span>>&lt;/div>        &lt;/div>    &lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.dad</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.son</span></span><span class="token punctuation">{</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*margin-top: 100px;*/</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="根据上述代码先把margin-top注释掉-效果"><a href="#根据上述代码先把margin-top注释掉-效果" class="headerlink" title="根据上述代码先把margin-top注释掉(效果)"></a>根据上述代码先把margin-top注释掉(效果)</h5><p><img src="https://img-blog.csdnimg.cn/20191006205815838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="注释之后的效果"><br>我们的蓝色方块根据黑色方块向左移动了100px，很正常，但是当我们将注释的代码打开的时候，根据上面的经验我们预测应该看到的是蓝色的方块到了黑色的方块的右下角<br><img src="https://img-blog.csdnimg.cn/20191006210542161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="代码取消注释之后"><br>我们可以看到他并没有你找我们预想的那样，蓝色的移动到黑色的右下角，而是黑色的跟着蓝色的下移了50px，当然这就是margin的塌陷问题了，就是这个box好像不能作为dad移动的参照物了，这就是取名为margin塌陷的原因。==在水平和垂直方向上谁大取谁的而且是相对于承载这个元素的元素==</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2019/12/09/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/12/09/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-汉字编码表地址以及各种编码的区域"><a href="#1-汉字编码表地址以及各种编码的区域" class="headerlink" title="1.汉字编码表地址以及各种编码的区域"></a>1.汉字编码表地址以及各种编码的区域</h2><p><a href="https://www.cnblogs.com/whiteyun/archive/2010/07/06/1772218.html" target="_blank" rel="noopener">1.汉字编码</a><br><a href="https://www.cnblogs.com/csguo/p/7401874.html" target="_blank" rel="noopener">2.各种编码范围</a><br><strong>outer（标签）：就相当于表示它现在代表的某个循环。如果想跳出它所代表的循环，那么就break outer;如果想结束它所代表的此次循环，那么就continue outer;</strong></p><h2 id="2-String的两种实例化方式"><a href="#2-String的两种实例化方式" class="headerlink" title="2.String的两种实例化方式"></a>2.String的两种实例化方式</h2><p><strong>方式一：直接赋值（创建的对象存放在字符串对象池里，假如存在就不会再创建）<br>    方式二：new对象（每一次都创建一个新的对象）</strong><br>    <strong>字符串内容具有不可变性：不能改变字符串的内容，只能通过指向一个新的内存地址。</strong></p><h2 id="3-内部类与外部类"><a href="#3-内部类与外部类" class="headerlink" title="3.内部类与外部类"></a>3.内部类与外部类</h2><h6 id="1）内部类唯一的好处是可以方便地使用外部类的属性。缺点是破坏了类的基本结构（方法-属性）。"><a href="#1）内部类唯一的好处是可以方便地使用外部类的属性。缺点是破坏了类的基本结构（方法-属性）。" class="headerlink" title="1）内部类唯一的好处是可以方便地使用外部类的属性。缺点是破坏了类的基本结构（方法+属性）。"></a>1）内部类唯一的好处是可以方便地使用外部类的属性。缺点是破坏了类的基本结构（方法+属性）。</h6><h6 id="2）外部类实例化内部类语法：先外部类实例化对象；外部类名-内部类名-对象名-外部类对象-new-内部类（）"><a href="#2）外部类实例化内部类语法：先外部类实例化对象；外部类名-内部类名-对象名-外部类对象-new-内部类（）" class="headerlink" title="2）外部类实例化内部类语法：先外部类实例化对象；外部类名.内部类名 对象名=外部类对象.new 内部类（）"></a>2）外部类实例化内部类语法：先外部类实例化对象；外部类名.内部类名 对象名=外部类对象.new 内部类（）</h6><h6 id="3）为什么在匿名内部类中引用外部对象要加final修饰符"><a href="#3）为什么在匿名内部类中引用外部对象要加final修饰符" class="headerlink" title="3）为什么在匿名内部类中引用外部对象要加final修饰符"></a>3）为什么在匿名内部类中引用外部对象要加final修饰符</h6><p><strong>在匿名内部类中引用的外部对象受到外部线程的作用域的制约有其特定的生命周期，以线程为例，当外部的变量生命周期已经完结之后，内部的线程还在运行，怎么样解决这个外部生命周期已经结束而在内部却需要继续使用呢，这个时候就需要在外部变量中添加final修饰符，其实内部匿名类使用的这个变量就是外部变量的一个“复制品”，即使外部变量生命周期已经结束，内部的“复制品“依然可用。</strong></p><h2 id="4-静态工厂"><a href="#4-静态工厂" class="headerlink" title="4.静态工厂"></a>4.静态工厂</h2><h6 id="静态（简单）工厂模式："><a href="#静态（简单）工厂模式：" class="headerlink" title="静态（简单）工厂模式："></a>静态（简单）工厂模式：</h6><p>优点：隐藏了对象创建的细节，将实例化过程放到了工厂类中实现，起到了解耦的作用。客户端基本不用关心使用的是哪个产品，只需要知道用工厂的哪个方法(或者传入什么参数)就行了。方便添加新的子类，只需要在工厂类的创建方法添加分支，或者增加创建方法就可以了。遵循了依赖倒转原则，即不用自己负责对象的创建。<br>缺点：适用于产品子类型差不多, 使用的方法名都相同的情况。每添加一个产品子类，都必须在工厂类中添加一个判断分支(或一个方法)，这违背了OCP(开放-封闭原则)。</p><h2 id="5-单列模式"><a href="#5-单列模式" class="headerlink" title="5.单列模式"></a>5.单列模式</h2><h6 id="单件模式用途："><a href="#单件模式用途：" class="headerlink" title="单件模式用途："></a>单件模式用途：</h6><p>单件模式属于工厂模式的特例，只是它不需要输入参数并且始终返回同一对象的引用。<br>单件模式能够保证某一类型对象在系统中的唯一性，即某类在系统中只有一个实例。它的用途十分广泛，打个比方，我们开发了一个简单的留言板，用户的每一次留言都要将留言信息写入到数据库中，最直观的方法是没次写入都建立一个数据库的链接。这是个简单的方法，在不考虑并发的时候这也是个不错的选择。但实际上，一个网站是并发的，并且有可能是存在大量并发操作的。如果我们对每次写入都创建一个数据库连接，那么很容易的系统会出现瓶颈，系统的精力将会很多的放在维护链接上而非直接查询操作上。这显然是不可取的。<br>如果我们能够保证系统中自始至终只有唯一一个数据库连接对象，显然我们会节省很多内存开销和cpu利用率。这就是单件模式的用途。当然单件模式不仅仅只用于这样的情况。在《设计模式：可复用面向对象软件的基础》一书中对单件模式的适用性有如下描述：<br>1、当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。<br>2、当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</p><h6 id="对单件模式的懒汉式与饿汉式进行简单介绍："><a href="#对单件模式的懒汉式与饿汉式进行简单介绍：" class="headerlink" title="对单件模式的懒汉式与饿汉式进行简单介绍："></a>对单件模式的懒汉式与饿汉式进行简单介绍：</h6><p>1）饿汉式：在程序启动或单件模式类被加载的时候，单件模式实例就已经被创建。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                        <span class="token keyword">private</span> <span class="token keyword">static</span> Single s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">private</span> <span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> Simple <span class="token function">getSimple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*枚举法：*/</span><span class="token keyword">enum</span> Single <span class="token punctuation">{</span>        Single<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleDemo</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Single a <span class="token operator">=</span> Single<span class="token punctuation">.</span>Single<span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*反之如果单件模式在系统中会很少用到或者几乎不会用到，那么懒汉式是一个不错的选择。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2)懒汉式</p><pre class="line-numbers language-java"><code class="language-java">懒汉式<span class="token operator">:</span><span class="token keyword">class</span> <span class="token class-name">Single</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Single s <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>           s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    懒汉模式在使用时，容易引起不同步问题，所以应该创建同步<span class="token string">"锁"</span><span class="token punctuation">,</span>    <span class="token keyword">class</span> <span class="token class-name">Single1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Single1 s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Single1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//同步函数的demo</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Single1 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//同步代码快的demo加锁，安全高效</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Single1 <span class="token function">getInStanceBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Single1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>null<span class="token punctuation">)</span>                        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">return</span> s；        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-异常"><a href="#6-异常" class="headerlink" title="6.异常"></a>6.异常</h2><p><strong>Exception是检查型异常，例如Exception在程序中必须使用try..catch进行处理；RuntimeException是非检查型异常，例如NumberFormatException，可以不使用try..catch进行处理，但是如果产生异常，则异常将由JVM进行处理，RuntimeException最好也用try…catch捕获</strong></p><h2 id="7-集合的遍历"><a href="#7-集合的遍历" class="headerlink" title="7.集合的遍历"></a>7.集合的遍历</h2><p>1）LinkedList集合实现遍历使用get（）方法，迭代器遍历集合的方法代码实现</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 用iterator遍历集合     */</span>    Iterator<span class="token operator">&lt;</span>Student<span class="token operator">></span> it<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回一个迭代器</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Student s<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回迭代的下一个元素</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"年龄: "</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）foreach遍历</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用foreach遍历集合 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Student s<span class="token operator">:</span>list<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"年龄: "</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-线程状态"><a href="#8-线程状态" class="headerlink" title="8.线程状态"></a>8.线程状态</h2><h6 id="1-，创建状态"><a href="#1-，创建状态" class="headerlink" title="(1)，创建状态"></a>(1)，创建状态</h6><p>在程序中用构造方法创建了一个线程对象后，新的线程对象便处于新建状态，此时，它已经有了相应的<br>内存空间和其他资源，但还处于不可运行状态。新建一个线程对象可采用 Thread 类的构造方法来实现，例<br>如，“Thread thread=new Thread();”。<br>(2)，就绪状态<br>新建线程对象后，调用该线程的 start()方法就可以启动线程。当线程启动时，线程进入就绪状态。此时，<br>线程将进入线程队列排队，等待 CPU 服务，这表明它已经具备了运行条件。<br>(3)，运行状态<br>当就绪状态的线程被调用并获得处理器资源时，线程就进入了运行状态。此时，自动调用该线程对象<br>的 run()方法。run()方法定义了该线程的操作和功能。<br>(4)，堵塞状态<br>一个正在执行的线程在某些特殊情况下，如被人为挂起或需要执行耗时的输入/输出操作时，将让出<br>CPU 并暂时中止自己的执行，进入堵塞状态。堵塞时，线程不能进入排队队列，只有当引起堵塞的原因被<br>消除后，线程才可以转入就绪状态。<br>(5)，死亡状态<br>线程调用 stop()方法时或 run()方法执行结束后，即处于死亡状态。处于死亡状态的线程不具有继续运<br>行的能力。<br>                                                                             加油！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat在Eclipse部署完成也可以启动，但是运行时404！</title>
      <link href="/2019/12/09/Tomcat%E5%9C%A8Eclipse%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%90%AF%E5%8A%A8%EF%BC%8C%E4%BD%86%E6%98%AF%E8%BF%90%E8%A1%8C%E6%97%B6404%EF%BC%81/"/>
      <url>/2019/12/09/Tomcat%E5%9C%A8Eclipse%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%90%AF%E5%8A%A8%EF%BC%8C%E4%BD%86%E6%98%AF%E8%BF%90%E8%A1%8C%E6%97%B6404%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat在Eclipse部署完成也可以启动，但是运行时404（运行startup-bat可以运行程序）！"><a href="#Tomcat在Eclipse部署完成也可以启动，但是运行时404（运行startup-bat可以运行程序）！" class="headerlink" title="Tomcat在Eclipse部署完成也可以启动，但是运行时404（运行startup.bat可以运行程序）！"></a>Tomcat在Eclipse部署完成也可以启动，但是运行时404（运行startup.bat可以运行程序）！</h1><p><strong>默认情况是如下图</strong><br><img src="https://img-blog.csdnimg.cn/20191106170149885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="默认部署是这样，如果一部署在eclipse上所有的都是灰色的，不可选的"><br>==默认部署时打开tomcat时所有选项都是不可选的，都是灰色的，此时要清除部署直接删除或者右键点击tomcat之后点击clean即清除==<br><strong>之后更改选项如下图红色箭头所示选项</strong><br><img src="https://img-blog.csdnimg.cn/20191106171509357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==置成功重新部署tomcat即可运行==<br>希能对你有用</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Web应用服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC在项目中配置数据库驱动</title>
      <link href="/2019/12/06/JDBC%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8/"/>
      <url>/2019/12/06/JDBC%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>1.右击项目Build Path——&gt;configure Build Path<br><img src="https://img-blog.csdnimg.cn/20190922201229384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.Add Exteranl JARs<br>下载链接：<a href="https://dev.mysql.com/" target="_blank" rel="noopener">Mysql-connection-java-版本-bin.jar </a><br><img src="https://img-blog.csdnimg.cn/20190922201143445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.选择你的Ecllipse与之对应的JAR版本<br>参考：<a href="https://blog.csdn.net/hchhan/article/details/81106992" target="_blank" rel="noopener">Ecllipse与之对应的JAR版本</a>（转）<br>4.选择版本 Apply -&gt;Apply and close</p><p><img src="https://img-blog.csdnimg.cn/20190922201710352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzc1MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基础（一）</title>
      <link href="/2019/12/06/SpringBoot%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/12/06/SpringBoot%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1.SpringBoot简介"></a>1.SpringBoot简介</h4><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p><h5 id="1-1pom文件"><a href="#1-1pom文件" class="headerlink" title="1.1pom文件"></a>1.1pom文件</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../../spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>是所有依赖的父项目，来真正管理SpringBoot里面的所有依赖版本（SpringBoot的仲裁中心）</strong></p><h5 id="1-2导入依赖"><a href="#1-2导入依赖" class="headerlink" title="1.2导入依赖"></a>1.2导入依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>spring-boot-starter是SpringBoot的场景启动器，帮我们导入了web模块正常运行所依赖的组件，SpringBoot将所有的功能抽取出来做成一个个的starts（启动器），只需在项目引入这些starter相关场景的依赖都会导进来，要用什么功能就导入什么场景的启动器</strong></p><h4 id="主配置类"><a href="#主配置类" class="headerlink" title="主配置类"></a>主配置类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>           <span class="token comment" spellcheck="true">//来标注一个主程序类，说明是一个SpringBoot应用</span>    <span class="token keyword">class</span> <span class="token class-name">HelloWorldApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spring应用启动起来</span>    SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@SpringBootApplication：标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就运行这个类的main方法q启动SpringBoot应用</strong><br><strong>点击进入@SpringBootApplication</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span>      <span class="token comment" spellcheck="true">//SpringBoot的配置类，标注在某个类上，表示这是一个SpringBoot的配置类</span><span class="token annotation punctuation">@EnableAutoConfiguration</span>      <span class="token comment" spellcheck="true">//开启自动配置功能，告诉我们SpringBoot开启自动配置功能，这样自动配置才能起作用</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span>TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span>AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@SpringBootConfiguration：这个注解标注在那个类上，说明此类是一个SpringBoot的配置类<br>@Configuration：配置类上来标注这个注解；配置类—–配置文件；配置类也是容器中的一个组件；@Component</strong><br><strong>点击进入@EnableAutoConfiguration</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@AutoConfigurationPackage：自动配置包；@Import({Registrar.class})；Spring的底层注解，给容器中导入一个组件；导入的组件由Registrar.class将主配置类（@SpringBootApplication标注的类）的所在包及下面的所有子包里面的所有组件扫描到spring容器中<br>@Import({EnableAutoConfigurationImportSelector.class})；给容器中导入组件；EnableAutoConfigurationImportSelector；导入哪些组件的选择器，将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景所需要的所有组件，并配置好这些组件==有了自动配置类，免去了我们手动编写配置注入功能组件等的工作==</strong></p><h5 id="1-3配置文件SpringBoot使用一个全局的配置文件，配置文件名是固定的："><a href="#1-3配置文件SpringBoot使用一个全局的配置文件，配置文件名是固定的：" class="headerlink" title="1.3配置文件SpringBoot使用一个全局的配置文件，配置文件名是固定的："></a>1.3配置文件SpringBoot使用一个全局的配置文件，配置文件名是固定的：</h5><p><strong>application.properties<br>application.yml</strong><br><strong>配置文件的作用：修改SpringBoot自动配置的默认值</strong></p><h6 id="1-3-1YAML-YAML-Ain’t-Markup-Language）"><a href="#1-3-1YAML-YAML-Ain’t-Markup-Language）" class="headerlink" title="1.3.1YAML(YAML Ain’t Markup Language）"></a>1.3.1YAML(YAML Ain’t Markup Language）</h6><p><strong>（1）基本语法：</strong><br>k:(空格)v:表示一对键值对（空格必须有）；以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的（属性和值也是大小写敏感的）<br><strong>（2）值的写法：</strong><br>字面量：普通的值（数字，字符串，布尔）k: v: 字面直接来写；<br>  字符串默认不用加上单引号’’和双引号“”<br>“”双引号：不会转义字符串里面的特殊字符串；特殊字符串会作为本身想表示的意思name: “zhangsan \n list”:输出：</p><pre class="line-numbers language-yaml"><code class="language-yaml">    zhangsan     list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>‘单引号：会转义特殊字符，特殊字符最终只是一个普通的字符串数据name: ‘zhangsan \n list’:输出:</p><pre class="line-numbers language-yaml"><code class="language-yaml">    zhangsan \n list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对象（属性和值）（键值对）；<br>对象、map（属性和值）（键值对）：<br>      k: v: 在下一行来写对象的属性和值的关系；注意缩进<br>      对象还是K: v的方式</p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">friends</span><span class="token punctuation">:</span>            <span class="token key atrule">lastname</span><span class="token punctuation">:</span> zhangsan            <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>行内写法：</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">lastname</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  注意冒号后面有空格<br>数组（List，Set）<strong>用值表示数组中的一个元素</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">pets</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> cat      (杆+空格+值)         <span class="token punctuation">-</span> dog         <span class="token punctuation">-</span> pig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>杆+空格+值</strong><br><strong>行内写法：</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>YAML配置实例：</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>properties配置实例：</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">   server.port=8080;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>XML配置实例：</strong></p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="1-3-2配置文件值的注入"><a href="#1-3-2配置文件值的注入" class="headerlink" title="1.3.2配置文件值的注入"></a>1.3.2配置文件值的注入</h6><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">person</span><span class="token punctuation">:</span>      <span class="token key atrule">firstName</span><span class="token punctuation">:</span> zhang      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>      <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2019/11/23      <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> <span class="token key atrule">12，k3</span><span class="token punctuation">:</span> v3<span class="token punctuation">}</span>      <span class="token key atrule">lists</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> lisi        <span class="token punctuation">-</span> zhaoliu      <span class="token key atrule">dog</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4JavaBean"><a href="#1-4JavaBean" class="headerlink" title="1.4JavaBean"></a>1.4JavaBean</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> String firstName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>将配置文件中配置的每一个值映射到这个组件中<br>@ConfigurationProperties：告诉SpringBoot经本类中的所有的属性和配置文件中相关的配置进行绑定<br>prefix = “person”：配置文件中那个下面的所有属性进行一一映射<br>只有这个组件是容器中的组件，才能让容器提供的@ConfigurationProperties功能</strong><br>我们可以导入配置文件处理器，编写就有提示了</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@Value获取值和@ConfigurationProperties获取值比较</strong></p><table><thead><tr><th>ZXL</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEl</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持（@Validated）</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 后端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/05/hello-world/"/>
      <url>/2019/12/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
